@inject IJSRuntime Js
@inject IRepositorio repositorio
@inject NotificationService ns
@inject SweetAlertService Swal

@page "/obtencion/catalogos"

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Analista Credito, Precios, Gestion de Transportes, Ejecutivo de Cuenta Operativo")]

<div class="col-12">
    <div class="col-12 card shadow">
        <div class="card-header">
            <b>Descargas de catalogos</b>
        </div>
        <div class="card-body">
            <div class="col-12 row p-4">
                @foreach (var item in Catalogos)
                {
                    <AuthorizeView Roles="@item.Roles">
                        <div class="col-4 mb-4">
                            <div class="col-12">
                                <button class="col-12 btn shadow-sm" @onclick="@(()=>DownloadCatalogo(item))">
                                    <div class="col-12 row">
                                        <div class="col-4">
                                            <img src="@item.Img" class="img-fluid" />
                                        </div>
                                        <div class="col d-flex align-items-center text-black justify-content-start">
                                            <b>@item.NombreCatalogo</b>
                                        </div>
                                    </div>
                                </button>
                            </div>
                        </div>
                    </AuthorizeView>
                }
            </div>
        </div>
    </div>
</div>

@code {
    List<OpcionCatalogo> Catalogos = new();
    protected override void OnInitialized()
    {
        Catalogos.AddRange(new List<OpcionCatalogo>() {
            new("Catalogo de cliente",
            "img/Cliente.png",
            "api/clientes/catalogo",
            "Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo, Analista Credito, Programador, Precios"),

            new("Catalogo de destinos",
            "img/mapa.png",
            "api/estacion/catalogo",
            "Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo, Analista Credito, Programador, Precios"),

            new("Catalogo de grupo transportista",
            "img/GrupoTransportes.png",
            "api/transportista/grupo/catalogo",
            "Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes"),

            new("Catalogo de empresa transportista",
            "img/delivery-truck (1).png",
            "api/transportista/catalogo",
            "Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes"),

            new("Catalogo de choferes",
            "img/worker (1).png",
            "api/chofer/catalogo",
            "Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes"),

            new("Catalogo de unidades",
            "img/delivery-truck.png",
            "api/vehiculo/catalogo",
            "Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes"),
        });
    }

    private async Task DownloadCatalogo(OpcionCatalogo opcion)
    {
        try
        {
            var response = await repositorio.Get<byte[]>(opcion.UrlDowndload);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                await Js.GuardarComo($"{opcion.NombreCatalogo}_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private record OpcionCatalogo(string NombreCatalogo, string Img, string UrlDowndload, string Roles);
}

