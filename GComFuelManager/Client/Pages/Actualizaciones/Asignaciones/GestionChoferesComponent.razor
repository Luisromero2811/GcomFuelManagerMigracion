@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject TooltipService ts
@inject NotificationService Ns
@inject GestionChoferesValidation gestionChofer

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador, Inventarios")]

<div class="card">
    <div class="card-header">
        <b>Catalogo de Choferes</b>
    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="@chofer" class="form col-12" OnValidSubmit="@CreateChofer" Context="Validations">
                <FluentValidationValidator Validator="gestionChofer" />
                <ValidationSummary />
                <div class="col-12 row mb-3">
                    <div class="col-3">
                        <label>Transportista(Empresa):</label>
                        <RadzenDropDown @bind-Value="chofer.Id_Transportista" TValue="string" Data="Grupos" TextProperty="Den" ValueProperty="Busentid"
                                        AllowVirtualization="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                        </RadzenDropDown>
                    </div>
                    <div class="col-2">
                        <label>Nombre del Chofer:</label>
                        <InputText @bind-Value="chofer.Den" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-2">
                        <label>Apellido del Chofer:</label>
                        <InputText @bind-Value="chofer.Shortden" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-3" @onmouseenter="@(args => ShowToolsTip(infosIcon))" @ref="infosIcon">
                        <label>RFC:<i class="fa-solid fa-circle-info fa-xs"></i></label>
                        <InputText @bind-Value="chofer.RFC_Capitales" class="form-control" MaxLenght="50">
                            <ValidationMessage For="@(()=>chofer.RFC)" />
                        </InputText>
                    </div>
                    <div class="col-2" @onmouseenter="@(args => ShowToolTip(infoIcon))" @ref="infoIcon">
                        <label>Licencia:<i class="fa-solid fa-circle-info fa-xs"></i></label>
                        <InputText @bind-Value="chofer.Licencia" class="form-control" MaxLenght="40" />
                    </div>
                    <div class="col-3 d-flex mt-2 mx-auto">
                        @if (!isEdit)
                        {
                            <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Registrar Chofer
                            </button>
                        }
                        else
                        {
                            <button class="col mx-2 btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                            <button class="col mx-2 btn gcom-bg-amarillo" @onclick="@cancelEdit" type="button">
                                <i class="fa fa-solid fa-xmark"></i>
                            </button>
                        }

                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="card mt-2" style="height: 500px; overflow: scroll;">
    <div class="card-header">
        <b>Gestión de Cliente</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-3 mb-2">
                <label>Empresa Transportista</label>
                <RadzenDropDown Data="Grupos" class="col-12 form-control-sm" TextProperty="Den" ValueProperty="Cod" @bind-Value="chofer.Codtransport"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowVirtualization="true" Change="@GetCliente" Style="height:20px">
                    <!--chofer.Codtransport   busquedaCatalogo.busentid-->
                    <Template Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </Template>
                    <ValueTemplate Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </ValueTemplate>
                </RadzenDropDown>
            </div>
            <div class="col-12">
                <table class="table table-sm table-striped table-bordered table-hover" id="miTabla">
                    <thead class="fila">
                        <tr>
                            <th>Nombre del Chofer</th>
                            <th>Apellido</th>
                            <th>RFC</th>
                            <th>Licencia</th>
                            <th>Estado</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="fila">
                            <td>
                                <RadzenTextBox Change="@LoadData" @bind-Value="busquedaCatalogo.nombrechofer" />
                            </td>
                            <td>
                                <RadzenTextBox Change="@LoadData" @bind-Value="busquedaCatalogo.apellidochofer" />
                            </td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                        @if (Choferes.Count > 0)
                        {
                            <Virtualize Items="Choferes" TItem="Chofer" Context="item">
                                <tr>
                                    <td>@item.Den</td>
                                    <td>@item.Shortden</td>
                                    <td>@item.RFC</td>
                                    <td>@item.Licencia</td>
                                    <td>
                                        <div class="form-check form-switch mx-2">
                                            <input class="form-check-input" type="checkbox" role="switch" id="@item.Cod" checked="@item.Activo_Permanente"
                                                   @onchange="((ChangeEventArgs e) => HabilitarDeshabilitar(item, e))">
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>@SetDestino(item))">
                                            <i class="fa fa-solid fa-edit"></i>
                                        </button>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .button-circle { /* Green */
        border: none;
        color: white;
        padding: .40rem .60rem;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: .75rem;
        cursor: pointer;
        border-radius: 2rem;
    }

    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .fila td {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 28px;
        background-color: #f2f2f2;
    }

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

    .sticky-column-header {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 2;
        background-color: white;
    }

    .sticky-column, .sticky-column + th, .sticky-column + td {
        min-width: 180px;
    }

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px;
            background: transparent;
        }
</style>

@code {
    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Chofer> Chofer_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<Chofer> Choferes { get; set; } = new List<Chofer>();
    List<Transportista> Grupos { get; set; } = new List<Transportista>();

    //Instancias
    public Chofer chofer { get; set; } = new Chofer();
    public Tad Tad { get; set; } = new Tad();
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();
    AsignacionDTO asignacion { get; set; } = new AsignacionDTO();
    Chofer_Tad chofer_Tad { get; set; } = new Chofer_Tad();

    Dictionary<string, string> query = new Dictionary<string, string>();
    ParametrosBusquedaCatalogo busquedaCatalogo = new ParametrosBusquedaCatalogo();

    bool isEdit = false;

    ElementReference infosIcon;
    ElementReference infoIcon;
    void ShowToolsTip(ElementReference elementReference, TooltipService optionss = null!) => ts.Open(elementReference, "RFC Puede ir opcional");
    void ShowToolTip(ElementReference elementReference, TooltipService optionss = null!) => ts.Open(elementReference, "Licencia Puede ir opcional");

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await GetGrupos();
        // await ObtenerEmpresa(string.Empty);
    }

    private async Task CreateChofer()
    {
        try
        {
            //string? busentid = Grupos.FirstOrDefault(x => x.Cod == chofer.Codtransport)?.Busentid;
            chofer.Codtransport = Convert.ToInt32(chofer.Id_Transportista);
            chofer.RFC = chofer.RFC.ToUpper();
            //transportista.Codgru = transportista.GrupoTransportista!.cod!;
            var response = await repositorio.Post<Chofer>($"api/chofer/crearChofer", chofer);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Chofer {chofer.Den} asignado a transportista seleccionado", SweetAlertIcon.Success);
                await GetGrupos();
                //await GetCliente();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<Transportista>>("api/transportista/lista");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadData()
    {
        Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["nombrechofer"] = busquedaCatalogo.nombrechofer;
        queryStringObject["apellidochofer"] = busquedaCatalogo.apellidochofer;

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await GetCliente();
    }

    private async Task GetCliente()
    {
        try
        {
            query = new Dictionary<string, string>();
            query["nombrechofer"] = busquedaCatalogo.nombrechofer ?? string.Empty;
            query["apellidochofer"] = busquedaCatalogo.apellidochofer ?? string.Empty;
            //query["busentid"] = busquedaCatalogo.busentid.ToString() ?? string.Empty;
            query["busentid"] = Grupos.FirstOrDefault(x => x.Cod == chofer.Codtransport)?.Cod.ToString() ?? string.Empty;
            query["codtransport"] = Grupos.FirstOrDefault(x => x.Cod == chofer.Codtransport)?.Busentid ?? string.Empty;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            //string? busentid = Grupos.FirstOrDefault(x => x.Cod == chofer.Codtransport)?.Busentid;
            var response = await repositorio.Get<List<Chofer>>($"api/chofer/listado?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Choferes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task PostRelacion()
    {
        try
        {
            if (Tads_Seleccionados.Count != 0 && Chofer_Seleccionados.Count != 0)
            {
                clienteTadDTO.Tads = Tads_Seleccionados;
                clienteTadDTO.Chofer = Chofer_Seleccionados;
                var response = await repositorio.Post<ClienteTadDTO>($"api/chofer/relacion", clienteTadDTO);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Chofer relacionado exitosamente", SweetAlertIcon.Success);
                    Choferes = new();
                    Chofer_Seleccionados = new();
                    await GetCliente();
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Debe tener seleccionado una terminal y un Chofer", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Borrar_Relacion(Chofer chofer, Tad tads)
    {
        try
        {
            chofer_Tad.Id_Terminal = tads.Cod;
            chofer_Tad.Id_Chofer = chofer.Cod;
            var response = await repositorio.Post<Chofer_Tad>($"api/chofer/borrar/relacion", chofer_Tad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", "Relacion borrada con éxito", SweetAlertIcon.Success);
                await GetCliente();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckChofer(Chofer chofer, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Chofer_Seleccionados.Contains(chofer))
                    Chofer_Seleccionados.Add(chofer);
            }
            else
            {
                if (Chofer_Seleccionados.Contains(chofer))
                    Chofer_Seleccionados.Remove(chofer);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckItemAll(object check)
    {
        try
        {
            if ((bool)check)
                Chofer_Seleccionados = Choferes;
            else
                Chofer_Seleccionados = new();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task HabilitarDeshabilitar(Chofer chofer, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/chofer/status/{chofer.Cod}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    await Message($"{chofer.Den} ha sido habilitado", SweetAlertIcon.Info);
                }
                else
                {
                    await Message($"{chofer.Den} ha sido deshabilitado", SweetAlertIcon.Info);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Message(string Message, SweetAlertIcon icon)
    {
        await Swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = Message });
    }

    private void SetDestino(Chofer choferes)
    {
        try
        {
            choferes.Id_Transportista = choferes.Codtransport.ToString();
            isEdit = true;
            chofer = choferes;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async void cancelEdit()
    {
        isEdit = false;
        chofer = new Chofer();
    }

}