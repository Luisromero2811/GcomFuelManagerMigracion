@inject IRepositorio http
@inject SweetAlertService Swal
@inject NotificationService Ns
@inject GestionDestinoValidation gestionDestino
@inject ClienteDestinoValidation validation

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador")]

<div class="card">
    <div class="card-header">
        <b>Agregar destino</b>
    </div>
    <div class="card-body">
        <EditForm Model="Destino" OnValidSubmit="GuardarDestino">
            <DataAnnotationsValidator />
            <FluentValidationValidator Validator="gestionDestino" />
            <div class="col-12 row">
                <div class="col-4">
                    <label>Cliente</label>
                    <DropDownFilter @bind-Valor="Destino.Codcte" TValue="int" TListado="ClienteDTO" Listado="Clientes" Propiedad_Valor="Cod"
                                    Default_Placeholder="Cliente" Default_Placeholder_Filter="Buscar cliente" FiltrarValor="GetClientes">
                        <Render Context="cliente">
                            @cliente.Den
                        </Render>
                        <RenderValue Context="cliente">
                            @cliente.Den
                        </RenderValue>
                    </DropDownFilter>
                    <InputSelect class="d-none" @bind-Value="Destino.Codcte" />
                    <ValidationMessage For="@(()=>Destino.Codcte)" />
                </div>
                <div class="col-4">
                    <label>Nombre de destino</label>
                    <InputText class="form-control form-control-sm" @bind-Value="Destino.Den" />
                    <ValidationMessage For="@(()=>Destino.Den)" />
                </div>
                <div class="col-4">
                    <label>Id de destino de gobierno</label>
                    <InputText class="form-control form-control-sm" @bind-Value="Destino.Id_DestinoGobierno" />
                    <ValidationMessage For="@(()=>Destino.Id_DestinoGobierno)" />
                </div>
                <div class="col-4">
                    <label>Direcci√≥n</label>
                    <InputTextArea class="form-control form-control-sm" @bind-Value="Destino.Dir" />
                    <ValidationMessage For="@(()=>Destino.Dir)" />
                </div>
                <div class="col-4">
                    <label>Ciudad</label>
                    <InputText class="form-control form-control-sm" @bind-Value="Destino.Ciu" />
                    <ValidationMessage For="@(()=>Destino.Ciu)" />
                </div>
                <div class="col-4">
                    <label>Estado</label>
                    <InputText class="form-control form-control-sm" @bind-Value="Destino.Est" />
                    <ValidationMessage For="@(()=>Destino.Est)" />
                </div>
                <div class="col-4">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" id="CheckMultidestino" @bind-Value="Destino.Es_Multidestino" />
                        <label class="form-check-label" for="CheckMultidestino">
                            Es multidestino
                        </label>
                    </div>
                </div>
                <div class="col-4">
                    <label>Tipo de venta</label>
                    <InputSelect @bind-Value="Destino.TipoVenta" class="form-select form-select-sm">
                        @foreach (var item in Enum.GetValues(typeof(ModeloVenta)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-4">
                    <label>Modelo de venta</label>
                    <InputSelect @bind-Value="Destino.ModeloVenta" class="form-select form-select-sm">
                        @foreach (var item in Enum.GetValues(typeof(TipoVenta)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </div>
                @*<div class="col-4">
                    <label>Modelo de compra</label>
                    <InputSelect @bind-Value="Destino.ModeloCompra" class="form-select form-select-sm">
                        @foreach (var item in Enum.GetValues(typeof(TipoCompra)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </div>*@
            </div>
            <div class="col-12 row mt-2">
                <div class="col-4">
                    <button class="btn btn-sm gcom-bg-amarillo col-12" type="submit">
                        <i class="fa fa-solid fa-floppy-disk" /> Guardar
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>
<div class="card my-2">
    <div class="card-header">
        <b>Relacionar cliente - destino</b>
    </div>
    <div class="card-body">
        <EditForm Model="Relacion" OnValidSubmit="GuardarRelacionDestino">
            <DataAnnotationsValidator />
            <FluentValidationValidator Validator="validation" />
            <div class="col-12 row">
                <div class="col-4">
                    <label>Cliente</label>
                    <DropDownFilter @bind-Valor="Relacion.Codcte" TValue="int" TListado="ClienteDTO" Listado="ClientesRelacion" Propiedad_Valor="Cod"
                                    Default_Placeholder="Cliente" Default_Placeholder_Filter="Buscar cliente" FiltrarValor="GetClientesRelacion">
                        <Render Context="cliente">
                            @cliente.Den
                        </Render>
                        <RenderValue Context="cliente">
                            @cliente.Den
                        </RenderValue>
                    </DropDownFilter>
                </div>
                <div class="col-4">
                    <label>Destino</label>
                    <DropDownFilter @bind-Valor="Relacion.Coddes" TValue="int" TListado="DestinoDTO" Listado="DestinosRelacion" Propiedad_Valor="Cod"
                                    Default_Placeholder="Destino" Default_Placeholder_Filter="Buscar destino" FiltrarValor="GetDestinosRelacion">
                        <Render Context="cliente">
                            @cliente.Den
                        </Render>
                        <RenderValue Context="cliente">
                            @cliente.Den
                        </RenderValue>
                    </DropDownFilter>
                </div>
                <div class="col-4 d-flex">
                    <button class="btn btn-sm gcom-bg-amarillo mt-auto col-12" type="submit">
                        <i class="fa fa-solid fa-floppy-disk" /> Guardar
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>
<div class="col-12">
    <div class="col-4 my-2">
        <DropDownFilter TListado="ClienteDTO" TValue="int" Listado="ClientesBusqueda" Default_Placeholder="Clientes" Propiedad_Valor="Cod"
                        Default_Placeholder_Filter="Buscar clientes" @bind-Valor="Filtro.Codcte" On_Change_Method="@(()=>GetDestinos())" FiltrarValor="GetClientesBusqueda">
            <Render>
                @context.Den
            </Render>
            <RenderValue>
                @context.Den
            </RenderValue>
        </DropDownFilter>
    </div>
</div>
<div class="col-12" style="height:500px;">
    <Tabla Datos="Destinos">
        <Cabeceras>
            <tr>
                <th>Editar</th>
                <th>Nombre de destino</th>
                <th>Direccion</th>
                <th>Ciudad</th>
                <th>Estado</th>
                <th>ID de destino de gobierno</th>
                <th>Tipo de venta</th>
                <th>Modelo de venta</th>
                @*<th>Modelo de compra</th>*@
                <th>Habilitar / Deshabilitar</th>
            </tr>
        </Cabeceras>
        <Columnas Context="item">
            <tr>
                <td>
                    <button class="btn btn-sm col-12 gcom-bg-amarillo" @onclick="@(()=>GetDestinoPost(item.Cod))">
                        <i class="fa fa-solid fa-edit" />
                    </button>
                </td>
                <td>@item.Den</td>
                <td>@item.Dir</td>
                <td>@item.Ciu</td>
                <td>@item.Est</td>
                <td>@item.Id_DestinoGobierno</td>
                <td>@item.TipoVenta</td>
                <td>@item.ModeloVenta</td>
                @*<td>@item.ModeloCompra</td>*@
                <td>
                    <div class="form-check form-switch mx-2">
                        <input class="form-check-input" type="checkbox" role="switch" id="DestinoStatus" checked="@item.Activo" @onchange="@(()=>ChangeStatusDestino(item.Cod))">
                    </div>
                </td>
            </tr>
        </Columnas>
    </Tabla>
</div>

@code {
    DestinoPostDTO Destino = new();

    ClienteDestinoDTO Relacion = new();

    DestinoDTO Filtro = new();

    List<ClienteDTO> Clientes = new();
    List<DestinoDTO> Destinos = new();

    List<ClienteDTO> ClientesBusqueda = new();

    List<ClienteDTO> ClientesRelacion = new();
    List<DestinoDTO> DestinosRelacion = new();


    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            GetClientes(),
            GetClientesBusqueda(),
            GetClientesRelacion(),
            GetDestinosRelacion());
    }

    public async Task GuardarDestino()
    {
        try
        {
            var response = await http.Post<DestinoPostDTO>($"api/estacion", Destino);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Ns.Notify(new()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Destino guardado"
                    });
                Filtro.Codcte = Destino.Codcte;
                await GetDestinos();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(ClienteDTO.CodgruNotNull)] = true.ToString();
            query[nameof(ClienteDTO.Den)] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<ClienteDTO>>($"api/clientes?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientesRelacion(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(ClienteDTO.CodgruNotNull)] = true.ToString();
            query[nameof(ClienteDTO.Den)] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<ClienteDTO>>($"api/clientes?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ClientesRelacion = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientesBusqueda(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(ClienteDTO.CodgruNotNull)] = true.ToString();
            query[nameof(ClienteDTO.Den)] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<ClienteDTO>>($"api/clientes?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ClientesBusqueda = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetDestinosRelacion(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(DestinoDTO.Den)] = value;
            query[nameof(DestinoDTO.Activo)] = true.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<DestinoDTO>>($"api/estacion?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                DestinosRelacion = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetDestinos(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(DestinoDTO.Den)] = value;
            query[nameof(DestinoDTO.Codcte)] = Filtro.Codcte.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<DestinoDTO>>($"api/estacion?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Destinos = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetDestinoPost(int id)
    {
        try
        {
            var response = await http.Get<DestinoPostDTO>($"api/estacion/{id}/post");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ChangeStatusDestino(int id)
    {
        try
        {
            var response = await http.Put<bool>($"api/estacion/{id}", true);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await GetDestinos();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GuardarRelacionDestino()
    {
        try
        {
            var response = await http.Put<bool>($"api/estacion/asignar?{nameof(ClienteDestinoDTO.Codcte)}={Relacion.Codcte}&{nameof(ClienteDestinoDTO.Coddes)}={Relacion.Coddes}", true);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Ns.Notify(new()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Destino relacionado"
                    });
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}