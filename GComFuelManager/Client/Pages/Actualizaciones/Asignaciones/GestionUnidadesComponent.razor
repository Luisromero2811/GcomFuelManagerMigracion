@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionUnidadValidation gestionUnidad

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador, Inventarios")]

<div class="card">
    <div class="card-header">
        <b>Catalogo de Toneles</b>
    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="@Unidad" class="form col-12" OnValidSubmit="@CreateUnidad" Context="Validations">
                <FluentValidationValidator Validator="gestionUnidad" />
                <ValidationSummary />
                <div class="col-12 row mb-3">
                    <div class="col-3"> 
                        <label>Transportista(Empresa):</label>
                        <RadzenDropDown @bind-Value="Unidad.Carid" TValue="string" Data="Grupos" TextProperty="Den" ValueProperty="CarrId"
                                        AllowVirtualization="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                        </RadzenDropDown>
                    </div>
                    <div class="col-3">
                        <label>Placa tonel:</label>
                        <InputText @bind-Value="Unidad.Placa" class="form-control" MaxLenght="80" />
                    </div>
                    @*<div class="col-2">
                            <label>Nº Compartimento:</label>
                            <InputNumber @bind-Value="Unidad.Nrocom" class="form-control" MaxLenght="80" />
                        </div>*@
                    <div class="col-2">
                        <label>Capacidad 1:</label>
                        <InputNumber @bind-Value="Unidad.Capcom" class="form-control" MaxLenght="80" />
                    </div>
                    @*<div class="col-2">
                            <label>Nº Compartimento 2:</label>
                            <InputNumber @bind-Value="Unidad.Nrocom2" class="form-control" MaxLenght="80" />
                        </div>*@
                    <div class="col-2">
                        <label>Capacidad 2:</label>
                        <InputNumber @bind-Value="Unidad.Capcom2" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-2">
                        <label>Capacidad 3:</label>
                        <InputNumber @bind-Value="Unidad.Capcom3" class="form-control" MaxLenght="80" />
                    </div>
                </div>
                <hr />
                @*Segunda Parte*@
                <div class="col-12 row mb-3">
                    @*<div class="col-2">
                            <label>Nº Compartimento 3:</label>
                            <InputNumber @bind-Value="Unidad.Nrocom3" class="form-control" MaxLenght="80" />
                        </div>*@

                    @*<div class="col-2">
                            <label>Nº Compartimento 4:</label>
                            <InputNumber @bind-Value="Unidad.Nrocom4" class="form-control" MaxLenght="80" />
                        </div>*@
                    <div class="col-3">
                        <label>Capacidad 4:</label>
                        <InputNumber @bind-Value="Unidad.Capcom4" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-3">
                        <label>Tracto:</label>
                        <InputText @bind-Value="Unidad.Tracto" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-3">
                        <label>Placa-Tracto:</label>
                        <InputText @bind-Value="Unidad.Placatracto" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-3">
                        <label>Certificado:</label>
                        <InputText @bind-Value="Unidad.Certificado_Calibracion" class="form-control" MaxLenght="50"></InputText>
                    </div>
                </div>
                <div class="col-12 row mb-3 justify-content-center">
                    <div class="col-4 d-flex mt-auto">
                        @if (!isEdit)
                        {
                            <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Registrar Unidad
                            </button>
                        }
                        else
                        {
                            <button class="col mx-2 btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                            <button class="col mx-2 btn gcom-bg-amarillo" @onclick="@cancelEdit" type="button">
                                <i class="fa fa-solid fa-xmark"></i>
                            </button>
                        }

                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="card mt-2" style="height: 500px; overflow: scroll;">
    <div class="card-header">
        <b>Gestión de Vehículos</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-3 mb-3">
                <label>Empresa Transportista</label>
                <RadzenDropDown Data="Grupos" class="col-12 form-control-sm" TextProperty="Den" ValueProperty="Cod" @bind-Value="Unidad.CodTra"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowVirtualization="true" Change="@GetCliente" Style="height:20px">
                    <Template Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </Template>
                    <ValueTemplate Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </ValueTemplate>
                </RadzenDropDown>
            </div>
            <div class="col-12">
                <table class="table table-sm table-striped table-bordered table-hover" id="miTabla">
                    <thead class="fila">
                        <tr>
                            <th>Placa Tonel:</th>
                            <th>Tracto:</th>
                            <th>Placa-Tracto:</th>
                            <th>Capacidades</th>
                            <th>Certificado de Calibración</th>
                            <th>Estado</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="fila">
                            <th>
                                <RadzenTextBox Change="@LoadData" @bind-Value="busquedaCatalogo.placatonel" Placeholder="Filtrar por placa tonel" />
                            </th>
                            <th>
                                <RadzenTextBox Change="@LoadData" @bind-Value="busquedaCatalogo.tracto" Placeholder="Filtrar por tracto"/>
                            </th>
                            <th>
                                <RadzenTextBox Change="@LoadData" @bind-Value="busquedaCatalogo.placatracto" Placeholder="Filtrar por tracto" />
                            </th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                        @if (Toneles.Count > 0)
                        {
                            <Virtualize Items="Toneles" TItem="Tonel" Context="item">
                                <tr>
                                    <td>@item.Placa</td>
                                    <td>@item.Tracto</td>
                                    <td>@item.Placatracto</td>
                                    <td>@item.Capacidad</td>
                                    <td>@item.Certificado_Calibracion</td>
                                    <td>
                                        <div class="form-check form-switch mx-2">
                                            <input class="form-check-input" type="checkbox" role="switch" id="@item.Cod" checked="@item.Activo"
                                                   @onchange="((ChangeEventArgs e) => HabilitarDeshabilitar(item, e))">
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>@SetDestino(item))">
                                            <i class="fa fa-solid fa-edit"></i>
                                        </button>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .button-circle { /* Green */
        border: none;
        color: white;
        padding: .40rem .60rem;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: .75rem;
        cursor: pointer;
        border-radius: 2rem;
    }

    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .fila td {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 28px;
        background-color: #f2f2f2;
    }

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

    .sticky-column-header {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 2;
        background-color: white;
    }

    .sticky-column, .sticky-column + th, .sticky-column + td {
        min-width: 180px;
    }

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px;
            background: transparent;
        }
</style>

@code {
    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Tonel> Unidad_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<Tonel> Toneles { get; set; } = new List<Tonel>();
    List<Transportista> Grupos { get; set; } = new List<Transportista>();

    //Instancias
    public Tonel Unidad { get; set; } = new Tonel();
    public Tad Tad { get; set; } = new Tad();
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();
    Unidad_Tad tonel_tad { get; set; } = new Unidad_Tad();
    AsignacionDTO asignacion { get; set; } = new AsignacionDTO();
    bool isEdit = false;

    Dictionary<string, string> query = new Dictionary<string, string>();
    ParametrosBusquedaCatalogo busquedaCatalogo = new ParametrosBusquedaCatalogo();
    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await GetGrupos();
        //await ObtenerChoferes(string.Empty);
    }

    private async Task CreateUnidad()
    {
        try
        {
            //Unidad.Carid = Unidad.Transportista!.CarrId;
            var response = await repositorio.Post<Tonel>($"api/vehiculo/crearUnidad", Unidad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Unidad {Unidad.Placa} asignado a transportista seleccionado", SweetAlertIcon.Success);
                //await ObtenerChoferes(string.Empty);
                await GetGrupos();
                //await GetCliente();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<Transportista>>("api/transportista/lista");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    //private async Task ObtenerChoferes(string value)
    //{
    //    try
    //    {
    //        Dictionary<string, string> query = new();
    //        query["Placa"] = value;

    //        var uri = Constructor_De_URL_Parametros.Generar_URL(query);

    //        var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/filtraractivos?{uri}");
    //        if (response.Error)
    //        {
    //            var message = await response.ObtenerMensajeError();
    //            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
    //        }
    //        else
    //        {
    //            Toneles = response.Response;
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }
    //}

    private async Task LoadData()
    {
        Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["placatonel"] = busquedaCatalogo.placatonel;
        queryStringObject["tracto"] = busquedaCatalogo.tracto;
        queryStringObject["placatracto"] = busquedaCatalogo.placatracto;

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await GetCliente();
    }

    private async Task GetCliente()
    {
        try
        {
            query = new Dictionary<string, string>();
            query["placatonel"] = busquedaCatalogo.placatonel ?? string.Empty;
            query["tracto"] = busquedaCatalogo.tracto ?? string.Empty;
            query["placatracto"] = busquedaCatalogo.placatracto ?? string.Empty;
            query["carrid"] = Grupos.FirstOrDefault(x => x.Cod == Unidad.CodTra)?.CarrId ?? string.Empty;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            //string? carrid = Grupos.FirstOrDefault(x => x.Cod == Unidad.CodTra)?.CarrId;
            var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/gestion?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Toneles = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task PostRelacion()
    {
        try
        {
            if (Tads_Seleccionados.Count != 0 && Unidad_Seleccionados.Count != 0)
            {
                clienteTadDTO.Tads = Tads_Seleccionados;
                clienteTadDTO.Toneles = Unidad_Seleccionados;
                var response = await repositorio.Post<ClienteTadDTO>($"api/vehiculo/relacion", clienteTadDTO);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Unidad relacionada exitosamente", SweetAlertIcon.Success);
                    Toneles = new();
                    Unidad_Seleccionados = new();
                    await GetCliente();
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Debe tener seleccionado una terminal y una Unidad", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Borrar_Relacion(Tonel tonel, Tad tads)
    {
        try
        {
            tonel_tad.Id_Terminal = tads.Cod;
            tonel_tad.Id_Unidad = tonel.Cod;
            var response = await repositorio.Post<Unidad_Tad>($"api/vehiculo/borrar/relacion", tonel_tad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", "Relacion borrada con éxito", SweetAlertIcon.Success);
                await GetCliente();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckUnidad(Tonel tonel, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Unidad_Seleccionados.Contains(tonel))
                    Unidad_Seleccionados.Add(tonel);
            }
            else
            {
                if (Unidad_Seleccionados.Contains(tonel))
                    Unidad_Seleccionados.Remove(tonel);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CheckItemAll(object check)
    {
        try
        {
            if ((bool)check)
                Unidad_Seleccionados = Toneles;
            else
                Unidad_Seleccionados = new();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task HabilitarDeshabilitar(Tonel tonel, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/vehiculo/{tonel.Cod}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    await Message($"{tonel.Den} ha sido habilitado", SweetAlertIcon.Info);
                }
                else
                {
                    await Message($"{tonel.Den} ha sido deshabilitado", SweetAlertIcon.Info);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Message(string Message, SweetAlertIcon icon)
    {
        await Swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = Message });
    }

    private void SetDestino(Tonel destino)
    {
        try
        {
            isEdit = true;
            Unidad = destino;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async void cancelEdit()
    {
        isEdit = false;
        Unidad = new Tonel();
    }

}

