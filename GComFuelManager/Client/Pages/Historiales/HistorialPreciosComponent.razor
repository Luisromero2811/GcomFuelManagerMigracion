@page "/historial/precios"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@using GComFuelManager.Shared.DTOs
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Precios, Analista Credito, Contador, Revision Precios")]

<h4><b>Historial de Precios</b></h4>

<div class="col-12 mt-1">
    <div class="d-flex justify-content-center">
        <div class="col-12 mt-1">
            <div class="col-12 card shadow-sm">
                <div class="col-12 card-body">
                    <label><b>Mostrar Precios:</b></label>
                    <div class="col-12 row d-flex">
                        <div class="col-4">
                            <label>Del:</label>
                            <input type="date" class="col-12 form-control form-control-sm" @bind="@busquedaPrecios.Fecha_Inicio" min="@DateTime.Today.AddDays(-3)">
                            </input>
                        </div>
                        <div class="col-4">
                            <label>A:</label>
                            <input type="date" class="col-12 form-control form-control-sm" @bind="@busquedaPrecios.Fecha_Fin" min="@DateTime.Today.AddDays(-3)">
                            </input>
                        </div>
                        <div class="col-4 d-flex">
                            <button class="btn btn-sm gcom-bg-amarillo col-12 mt-auto" @onclick="@GetPreciosFiltro">
                                <i class="fa fa-solid fa-eye"></i><b>Mostrar Precios</b>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<AuthorizeView Roles="Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Revision Precios" Context="GridOptim">
    <Authorized>
        <div class="col-12 mt-4 ancho-tabla">
            <Tabla Datos="Precios">
                <Cabeceras>
                    <tr>
                        <th>Fecha</th>
                        <th>Precio</th>
                        <th>Producto</th>
                        <th>Destino</th>
                        <th>Zona</th>
                        <th>Cliente</th>
                        <th>Moneda</th>
                        <th>Cambio</th>
                        <th>Usuario</th>
                        <th>Unidad de negocio</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td></td>
                        <td>
                            <input @oninput="@((args)=>SetFiltros(args, nameof(ParametrosBusquedaPrecios.producto)))" @bind="@busquedaPrecios.producto" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <input @oninput="@((args)=>SetFiltros(args, nameof(ParametrosBusquedaPrecios.destino)))" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <input @oninput="@((args)=>SetFiltros(args, nameof(ParametrosBusquedaPrecios.zona)))" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <input @oninput="@((args)=>SetFiltros(args, nameof(ParametrosBusquedaPrecios.cliente)))" class="form-control form-control-sm" />
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>@item.Fecha</td>
                        <td>@item.Pre</td>
                        <td>@item.Producto</td>
                        <td>@item.Destino</td>
                        <td>@item.Zona</td>
                        <td>@item.Cliente</td>
                        <td>@item.Moneda</td>
                        <td>@item.Cambio</td>
                        <td>@item.Usuario</td>
                        <td>@item.Unidad_Negocio</td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
        <div class="col-12">
            <PaginacionComponent PaginaActual="busquedaPrecios.Pagina_ACtual" PaginasTotales="busquedaPrecios.Total_paginas" PaginaSeleccionada="PaginasSeleccionadas" Radio="5" />
            <div class="col-12">
                <p>Total de registros: @busquedaPrecios.Total_registros</p>
            </div>
        </div>
        <div class="col-12 d-flex justify-content-end my-2">
            <div class="col-3">
                <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="GenerateExcel">
                    <i class="fa fa-solid fa-file-excel" /> Exportar excel
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    //List
    List<HistorialPrecioDTO> Precios = new();

    //Paginacion
    ParametrosBusquedaPrecios busquedaPrecios = new ParametrosBusquedaPrecios();
    int PaginasTotales;
    int PaginaActual = 1;
    int ConteoTotal;

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();

    //loadings
    bool loadingFiltro = false;
    bool loading = false;

    string TotalWidth = string.Empty;
    int width = 0;
    bool isClose = false;
    //grids
    RadzenDataGrid<PrecioHistorico> grid { get; set; } = new RadzenDataGrid<PrecioHistorico>();

    List<HistorialPrecioDTO> historialPrecio { get; set; } = new List<HistorialPrecioDTO>();

    Dictionary<string, string> query = new Dictionary<string, string>();

    private async Task PaginasSeleccionadas(int pagina)
    {
        busquedaPrecios.Pagina = pagina;
        busquedaPrecios.Pagina_ACtual = pagina;
        await GetPreciosFiltro();
    }

    private async Task SetFiltros(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(ParametrosBusquedaPrecios.producto):
                busquedaPrecios.producto = args?.Value?.ToString() ?? string.Empty;
                break;
            case nameof(ParametrosBusquedaPrecios.destino):
                busquedaPrecios.producto = args?.Value?.ToString() ?? string.Empty;
                break;
            case nameof(ParametrosBusquedaPrecios.zona):
                busquedaPrecios.producto = args?.Value?.ToString() ?? string.Empty;
                break;
            case nameof(ParametrosBusquedaPrecios.cliente):
                busquedaPrecios.producto = args?.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }

        await GetPreciosFiltro();
    }

    private Dictionary<string, string> LoadData()
    {
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject[nameof(busquedaPrecios.Fecha_Fin)] = busquedaPrecios.Fecha_Fin.ToString("MM/dd/yyyy") ?? string.Empty;
        queryStringObject[nameof(busquedaPrecios.Fecha_Inicio)] = busquedaPrecios.Fecha_Inicio.ToString("MM/dd/yyyy") ?? string.Empty;
        queryStringObject[nameof(busquedaPrecios.producto)] = busquedaPrecios.producto;
        queryStringObject[nameof(busquedaPrecios.destino)] = busquedaPrecios.destino;
        queryStringObject[nameof(busquedaPrecios.cliente)] = busquedaPrecios.cliente;
        queryStringObject[nameof(busquedaPrecios.zona)] = busquedaPrecios.zona;
        queryStringObject[nameof(busquedaPrecios.Pagina)] = busquedaPrecios.Pagina.ToString();
        queryStringObject[nameof(busquedaPrecios.Total_registros)] = "10";

        return queryStringObject;
    }

    public async Task GetPreciosFiltro()
    {
        try
        {
            loading = true;
            queryStringObject[nameof(Parametros_Busqueda_Gen.Excel)] = false.ToString();
            var uri = Constructor_De_URL_Parametros.Generar_URL(LoadData());
            var response = await repositorio.Get<List<HistorialPrecioDTO>>($"api/precio/historial?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                busquedaPrecios.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                busquedaPrecios.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                busquedaPrecios.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
                Precios = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GenerateExcel()
    {
        try
        {
            queryStringObject[nameof(Parametros_Busqueda_Gen.Excel)] = true.ToString();
            var uri = Constructor_De_URL_Parametros.Generar_URL(LoadData());
            var responseHttp = await repositorio.Get<byte[]>($"api/precio/historial?{uri}");
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                await js.GuardarComo($"HistorialPrecios_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", responseHttp.Response);
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


}

