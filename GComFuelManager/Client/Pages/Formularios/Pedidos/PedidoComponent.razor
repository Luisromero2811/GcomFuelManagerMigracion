@page "/ordenes"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject TooltipService ts
@inject IJSRuntime js
@inject PedidoOrdenValidation validation
@inject DialogService ds

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador, Revision Precios")]

<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador" Context="Create">
    <div class="card-header">
        <b>Creación de Órdenes sin pedido</b>
    </div>
    <div class="col-12 card shadow">
        <div class="card-body">
            <div class="col-12 row">
                <div class="col row d-flex justify-content-start">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenText Text="Precio automatico" />
                        <RadzenSwitch @bind-Value="@ordenCierre.Precio_Manual" Change="@(() => ChangePrecioType())" />
                    </RadzenStack>
                </div>
            </div>
            <EditForm Model="@ordenCierre" class="form col-12" OnValidSubmit="@GetFolio">
                <FluentValidationValidator Validator="validation" />
                <ValidationSummary />
                <div class="row col-12">
                    <div class="col-4">
                        <div class="col-12">
                            <label>Grupo</label>
                            <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodGru"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" Change="@GetClientes" Disabled="isFolio && !ordenCierre.IsCierreVolumen" Style="height:31px;">
                                <Template Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as Grupo)?.Den)
                                    </RadzenText>
                                </Template>
                                <ValueTemplate Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as Grupo)?.Den)
                                    </RadzenText>
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="col-12">
                            <label>Cliente</label>
                            <RadzenDropDown Data="Clientes" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodCte"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" Change="@GetEstaciones" Disabled="isFolio && !ordenCierre.IsCierreVolumen" Style="height:31px;">
                                <Template Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as CodDenDTO)?.Den)
                                    </RadzenText>
                                </Template>
                                <ValueTemplate Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as CodDenDTO)?.Den)
                                    </RadzenText>
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="col-12">
                            <label>Estacion</label>
                            <RadzenDropDown Data="Estaciones" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@GetPrecios"
                                            AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen" Style="height:31px;">
                                <Template Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as CodDenDTO)?.Den)
                                    </RadzenText>
                                </Template>
                                <ValueTemplate Context="data">
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        @((data as CodDenDTO)?.Den)
                                    </RadzenText>
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="col-12">
                            <label>Producto</label>
                            @if (ordenCierre.Precio_Manual)
                            {
                                <RadzenDropDown Data="Precios" class="col-12" TextProperty="Producto.Den" ValueProperty="Producto.Cod" @bind-Value="ordenCierre.CodPrd"
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@ChangeProducto"
                                                AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen" Style="height:31px;">
                                    <Template Context="data">
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                            <RadzenBadge Variant="Variant.Outlined" Text="@((data as Precio)?.FchDia.ToShortDateString())" />
                                        </RadzenText>
                                    </Template>
                                    <ValueTemplate Context="data">
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                        </RadzenText>
                                    </ValueTemplate>
                                </RadzenDropDown>
                            }
                            else
                            {
                                <InputSelect @bind-Value="ordenCierre.CodPrd" class="form-select form-select-sm">
                                    <option>-- Selecciona una Opcion --</option>
                                    @if (Productos is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Productos.Count == 0)
                                    {
                                        <option disabled> No hay productos </option>
                                    }
                                    else
                                    {
                                        foreach (var item in Productos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            }
                        </div>
                    </div>
                    @if (!ordenCierre.IsDifferentVol)
                    {
                        <div class="col-2">
                            <div class="col-12">
                                <label>Volumen</label>

                                <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select form-select-sm" disabled="@(isFolio && !ordenCierre.IsCierreVolumen)">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Cantidades is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Cantidades.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Cantidades)
                                        {
                                            <option value="@item">  @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", @item)</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }

                    @if (ordenCierre.IsDifferentVol)
                    {
                        <div class="col-2">
                            <div class="col-12">
                                <label>Volumen</label>
                                <InputNumber class="form-control col-12 form-control-sm" @bind-Value="ordenCierre.Volumen" disabled="@(isFolio  && !ordenCierre.IsCierreVolumen)" />
                            </div>
                        </div>
                    }

                    <div class="col-2 d-flex">
                        <div class="col-12 my-auto d-flex">
                            <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentVol Name="CheckBox1" class="me-2" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipVolumen(infoIconVolumen))" @ref="infoIconVolumen">
                                <label for="CheckBox1">
                                    Volumen Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-4">
                        <div class="col-12">
                            <label>Fecha de carga en terminal</label>
                            <input type="date" class="col-12 form-control form-control-sm" @bind="@ordenCierre.FchCar" />
                        </div>
                    </div>

                    <div class="col-4">
                        <div class="col-12">
                            <label>Fecha estimada de llegada</label>
                            <input type="date" class="col-12 form-control form-control-sm" @bind="@ordenCierre.FchLlegada" />
                        </div>
                    </div>
                    @if (!ordenCierre.IsDifferentTurn)
                    {
                        <div class="col-2">
                            <div class="col-12">
                                <label>Turno</label>
                                <InputSelect @bind-Value="ordenCierre.Turno" class="form-select form-select-sm">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Turnos is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Turnos.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Turnos)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    @if (ordenCierre.IsDifferentTurn)
                    {
                        <div class="col-2">
                            <div class="col-12">
                                <label>Turno</label>
                                <InputText class="form-control col-12 form-control-sm" @bind-Value="ordenCierre.Turno" />
                            </div>
                        </div>
                    }
                    <div class="col-2 mb-1 d-flex">
                        <div class="col-12 my-auto d-flex">
                            <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentTurn Name="CheckBox2" class="me-2" />
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipTurno(infoIconVolumen))" @ref="infoIconVolumen">
                                <label for="CheckBox2">
                                    Turno Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-4">
                        <div class="col-12">
                            @if (ordenCierre.Precio_Manual)
                            {
                                <div>
                                    <label>
                                        Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                    </label>
                                    <input type="number" class="form-control form-control-sm col-12 disabled" @bind="ordenCierre.Precio" disabled />
                                </div>
                            }
                            else
                            {
                                <div>
                                    <label>
                                        Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                    </label>
                                    <input type="number" step="0.0001" class="form-control form-control-sm col-12" @bind="@ordenCierre.Precio" />
                                </div>
                            }
                        </div>
                    </div>

                </div>
                <div class="col-12 d-flex justify-content-center mt-1">
                    @if (isEditing)
                    {
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2 btn-sm" type="button" @onclick="@EditPedido">
                                <i class="fa fa-solid fa-plus"></i>
                                <b>Guardar Cambio</b>
                                @if (loadingAgregar)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2 btn-sm" type="button" @onclick="@CancelEdit">
                                <i class="fa fa-solid fa-xmark"></i>
                                <b>Cancelar Cambio</b>
                            </button>
                        </div>
                    }
                    @if (!isEditing)
                    {

                        @if (!isFolio || ordenCierre.IsCierreVolumen)
                        {
                            <div class="col-4 px-2">
                                <button class="btn gcom-bg-amarillo col-12 mx-2 btn-sm @(SendOrden ? "disabled" : "" )" type="submit" disabled="@SendOrden">
                                    <i class="fa fa-solid fa-check"></i>
                                    <b>Crear orden</b>
                                    @if (SendOrden)
                                    {
                                        <SpinnerLoading></SpinnerLoading>
                                    }
                                </button>
                            </div>
                        }

                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2 btn-sm" type="button" @onclick="@ConfirmPedido">
                                <i class="fa fa-solid fa-check"></i>
                                <b>Confirmar ordenes</b>
                                @if (loadingConfirm)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>

                    }
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador, Revision Precios">
    <div class="col-12 d-flex justify-content-center row">
        <div class="col-12 overflow-scroll ancho-tabla mt-4" style="height:450px;resize:both;">
            <table class="table table-sm table-bordered table-hover" id="miTabla">
                <thead class="fila">
                    <tr style="max-height:50px;white-space:nowrap;">
                        <th class="sticky-column" style="background-color:white;max-width:180px;min-width:180px;width:120px;">
                            editar / cancelar
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Modelo de compra
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                            Folio
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Bin
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Terminal
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                            Destino
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                            Producto
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Volumen
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Precio
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                            Fecha de carga
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:80px;">
                            Estado
                        </th>
                        <th class="th-resizable overflow-hidden" style="min-width:20px;width:80px;">
                            Moneda
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@ordenCierres" Context="item" TItem="OrdenCierre">
                        <tr class="@(ordenCierre.Cod == item.Cod ? "table-active" : string.Empty)" style="white-space:nowrap;">
                            <td class="sticky-column" style="background-color:white;">
                                <div class="col-12 row">
                                    @if (item.OrdenEmbarque is not null && item.Estatus == true)
                                    {
                                        @if (item.OrdenEmbarque.CodordCom == null)
                                        {
                                            <div class="col-6">
                                                <button class="btn btn-sm btn-primary col-12" @onclick="@(()=>SetEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                            </div>
                                        }
                                        @if (string.IsNullOrEmpty(item.OrdenEmbarque.Bolguidid))
                                        {
                                            <div class="col-6">
                                                <button class="btn btn-sm btn-danger col-12" @onclick="@(()=>CancelPedido(item))"><i class="fa fa-solid fa-cancel"></i></button>
                                            </div>
                                        }
                                    }
                                </div>
                            </td>
                            <td>
                                <div>
                                    @if (item.OrdenEmbarque is not null)
                                    {
                                        <select class="form-select form-select-sm" @bind="item.OrdenEmbarque.ModeloCompra">
                                            @foreach (var item in Enum.GetValues(typeof(TipoCompra)))
                                            {
                                                <option>@item</option>
                                            }
                                        </select>
                                    }
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="rz-text-truncate">
                                    @item?.Folio
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="rz-text-truncate">
                                    @item?.OrdenEmbarque?.Bin
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="rz-text-truncate">
                                    @item?.OrdenEmbarque?.Tad?.Den
                                </div>
                            </td>
                            <td class="overflow-hidden">@item?.Destino?.Den</td>
                            <td class="overflow-hidden">@item?.Producto?.Den</td>
                            <td class="overflow-hidden">
                                <div class="col-12">
                                    <div class="col-12">
                                        @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                                                 item?.OrdenEmbarque?.Orden is not null ? item?.OrdenEmbarque?.Orden?.Vol :
                                                 item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom
                                                 : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom2
                                                 : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom3
                                                 : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom4
                                                 : item?.Volumen
                                                 )
                                    </div>
                                </div>
                            </td>
                            <td class="overflow-hidden">@item?.OrdenEmbarque?.Pre</td>
                            <td class="overflow-hidden">@item?.OrdenEmbarque?.Fchcar?.ToString("dd/MM/yyyy")</td>
                            <td class="overflow-hidden">@item?.OrdenEmbarque?.Estado?.den</td>
                            <td class="overflow-hidden">@item?.Moneda</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
        <div class="col-12 row m-0">
            <div class="col-3">
                <p class="text-muted">
                    Ordenes totales: @ordenCierres.Count
                </p>
            </div>
        </div>
    </div>
</AuthorizeView>

<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        font-size: 12px;
        text-align: left;
        table-layout: fixed;
    }

    table, th, td {
        background-color: white;
    }

    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .ancho {
        width: @TotalWidth;
    }

    tr:hover {
        background-color: #FFF633;
    }

    tr:active {
        background-color: #FFF633;
    }

    .asignar {
        table-layout: auto;
        width: auto;
    }

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

        .sticky-column, .sticky-column + th, .sticky-column + td {
            min-width: 180px;
        }

    .table-container {
        overflow: auto;
        width: 100%;
        border: 1px solid #ccc;
        max-height: 400px; /* Establece una altura máxima si es necesario */
    }

    th, td {
        padding: 8px;
        border: 1px solid #ccc;
    }

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px; /* Ancho del área de redimensionamiento */
            background: transparent;
        }

    .dropdown-content {
        position: absolute;
        background-color: #f6f6f6;
        border: 1px solid #ccc;
        max-height: 300px;
        z-index: 2;
        overflow: auto;
        list-style: none;
        max-width: 25%;
        font-size: 12px;
    }
</style>
@code {
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    public List<string> Turnos { get; set; } = new List<string>() { "11:00 pm - 7:00 am", "7:00 am - 3:00 pm", "3:00 pm - 11:00 pm" };
    private List<string> TpPago { get; set; } = new List<string> { "Credito", "Contado", "Contraentrega" };

    //grid
    private RadzenDataGrid<OrdenCierre> gridOC = new RadzenDataGrid<OrdenCierre>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    private List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };
    private VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    //listas
    private List<Tad> Terminales { get; set; } = null!;
    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<Precio> Precios { get; set; } = null!;
    private List<Producto> Productos { get; set; } = new List<Producto>();
    private List<Precio> ProductosDisponibles { get; set; } = null!;
    private IEnumerable<CodDenDTO> Destino { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;
    private List<string> Folios { get; set; } = new List<string>();

    private float Precio = 0;

    private string folio { get; set; } = string.Empty;

    bool loadingAgregar = false;
    bool loadingConfirm = false;
    bool loading = false;
    bool IsDifferentVol = false;
    bool isFolio = false;
    bool isEditing = false;
    bool IsCierreVolumen = false;
    bool SendOrden = false;

    private byte? CodProductoSeleccionado = 0;
    private int? DestinoSeleccionado = 0;
    private Int16? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;
    private short GrupoSeleccionadoFiltro = 0;
    private short GrupoSeleccionadoFiltroB = 0;
    private int ClienteSeleccionadoFiltro = 0;

    private Cliente Cliente { get; set; } = new Cliente();
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;

    private List<int> ordenPendientes = new List<int>();

    ElementReference infoIconVolumen;
    ElementReference infoFolio;

    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;
    private bool show = false;
    int count = 0;

    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
    Dictionary<string, string> queryStringObjectFolios = new Dictionary<string, string>();
    private IJSObjectReference importedJs;

    public List<ListadoFolioDetalle> folioDetalles { get; set; } = new List<ListadoFolioDetalle>();
    private string folioSearch = string.Empty;
    // private IList<FolioDetalleDTO> foliosFiltro => folioDetalles.Where(x => !string.IsNullOrEmpty(x.Folio) && x.Folio.Contains(folioSearch) || string.IsNullOrEmpty(folioSearch)).ToList();
    private IList<ListadoFolioDetalle> foliosFiltro { get; set; } = new List<ListadoFolioDetalle>();

    protected override async Task OnInitializedAsync()
    {
        await GetTerminales();
        await GetGrupos();
        await GetCantidades();
        await GetProductos();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);

            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";
            await js.InvokeVoidAsync("importarScript", "js/resizableTable.js");
        }
    }

    private void ClearGridData()
    {
        ordenCierres = new List<OrdenCierre>();
        ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
        isEditing = false;
        ordenCierre.IsCierreVolumen = false;
        isFolio = false;
    }

    void ShowTooltipVolumen(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introduzca una cantidad diferente.", options);
    void ShowTooltipTurno(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introduzca un turno de forma manual.", options);

    private void changeEdit()
    {
        if (!Cantidades.Any(x => x == ordenCierre.Volumen))
            ordenCierre.IsDifferentVol = true;
        else
            ordenCierre.IsDifferentVol = false;
        isEditing = !isEditing;
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar",
                    Text = "¿Desea cancelar la orden?"
                });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseOC = await http.Get<OrdenCierre>($"api/cierre/cancelar/{orden.Cod}");
                if (responseOC.Error)
                {
                    var responseHttp = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var index = ordenCierres.IndexOf(ordenCierres.FirstOrDefault(x => x.Cod == responseOC.Response.Cod)!);
                    ordenCierres.RemoveAt(index);
                    ordenCierres.Insert(index, responseOC.Response);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<Tad>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (ordenCierres.Count != 0)
            {
                ordens = new List<OrdenEmbarque>();
                foreach (var item in ordenCierres)
                    if (item.OrdenEmbarque!.CodordCom == null && item.OrdenEmbarque.Codtad != 0 && item.Estatus == true)
                        ordens.Add(item.OrdenEmbarque!);

                if (ordens.Count > 0)
                {
                    var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
                    if (response.Error)
                    {
                        loadingConfirm = false;
                        string? message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingConfirm = false;
                        await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                        ClearGridData();
                    }
                }
                else
                {
                    loadingAgregar = false;
                    loadingConfirm = false;

                    await Swal.FireAsync("Sin ordenes", "No tiene ordenes para confirmar", SweetAlertIcon.Info);
                }
            }
            else
            {
                loadingConfirm = false;
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "Debe tener ordenes para poder confirmarlas", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task EditPedido()
    {
        loadingAgregar = true;
        try
        {
            var response = await http.Post<OrdenCierre, OrdenCierre>("api/pedido/update", ordenCierre);
            if (response.Error)
            {
                loadingAgregar = false;
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {

                var index = ordenCierres.IndexOf(ordenCierres.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                ordenCierres.RemoveAt(index);
                ordenCierres.Insert(index, response.Response);
                loadingAgregar = false;
                await Swal.FireAsync("Éxito", "La orden fue actualizada correctamente", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void SetEdit(OrdenCierre? orden)
    {
        try
        {
            if (orden is null)
            {
                await Swal.FireAsync("Error", "No se selecciono ninguna orden", SweetAlertIcon.Error);
                return;
            }

            ordenCierre = orden;

            await GetClientes();
            await GetEstaciones();
            await GetPrecios();

            if (!Cantidades.Any(x => x == ordenCierre.Volumen))
                ordenCierre.IsDifferentVol = true;
            else
                ordenCierre.IsDifferentVol = false;

            isEditing = true;

            // gridOC?.SelectRow(orden);

            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            if (ordenCierre.CodCte != null && ClienteSeleccionado != ordenCierre.CodCte)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/estacion/{ordenCierre.CodCte}");
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    Estaciones = response.Response;
                    ClienteSeleccionado = ordenCierre.CodCte;
                    StateHasChanged();
                }
                queryStringObjectFolios = new Dictionary<string, string>();
                queryStringObjectFolios["codGru"] = ordenCierre?.CodGru?.ToString() ?? "";
                queryStringObjectFolios["codCte"] = ordenCierre?.CodCte?.ToString() ?? "";

                var DefaultValues = new List<string>() { "false", "", "0" };
                var uri = string.Join("&", queryStringObjectFolios.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

                var responseFolio = await http.Get<List<ListadoFolioDetalle>>($"api/pedido/folios?{uri}");
                if (responseFolio.Error)
                {
                    var message = await responseFolio.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    folioDetalles = responseFolio.Response;
                    foliosFiltro = folioDetalles;
                    ordenCierre.Folio_Perteneciente = string.Empty;
                    volumenDisponible = new VolumenDisponibleDTO();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (ordenCierre.CodGru != null && GrupoSeleccionado != ordenCierre.CodGru)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{ordenCierre.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = ordenCierre.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
                queryStringObjectFolios = new Dictionary<string, string>();
                queryStringObjectFolios["codGru"] = ordenCierre.CodGru.ToString() ?? "";

                var DefaultValues = new List<string>() { "false", "", "0" };
                var uri = string.Join("&", queryStringObjectFolios.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

                var responseFolio = await http.Get<List<ListadoFolioDetalle>>($"api/pedido/folios?{uri}");
                if (responseFolio.Error)
                {
                    var message = await responseFolio.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    folioDetalles = responseFolio.Response;
                    foliosFiltro = folioDetalles;
                    ordenCierre.Folio_Perteneciente = string.Empty;
                    volumenDisponible = new VolumenDisponibleDTO();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetFolio()
    {
        try
        {
            SendOrden = true;
            if (!string.IsNullOrEmpty(ordenCierre.Folio_Perteneciente))
            {
                queryStringObject["folio"] = ordenCierre.Folio_Perteneciente;

                var DefaultValues = new List<string>() { "false", "", "0" };
                var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

                var responseVerify = await http.Get<bool>($"api/cierre/caducidad/verify?{uri}");
                if (responseVerify.Error)
                {
                    var message = await responseVerify.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    SendOrden = false;
                    return;
                }

            }
            foreach (var item in Precios)
            {
                if (item.PrecioOverDate)
                    if (ordenCierre.Precio == item.Pre)
                        ordenCierre.PrecioOverDate = true;

                if (ordenCierre.Precio == item.Pre)
                    ordenCierre.ID_Moneda = item.ID_Moneda;
            }
            var response = await http.Post<OrdenCierre, OrdenCierre>($"api/pedido/create/all", ordenCierre);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                SendOrden = false;
            }
            else
            {
                if (response.Response.Destino is not null)
                {
                    if (response.Response.OrdenEmbarque is not null)
                    {
                        if (response.Response.Destino.ModeloCompra is not null)
                        {
                            response.Response.OrdenEmbarque.ModeloCompra = response.Response.Destino.ModeloCompra ?? TipoCompra.Rack;
                        }
                    }
                }
                ordenCierres.Add(response.Response);
            }

            SendOrden = false;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ChangeProducto()
    {
        try
        {
            if (ordenCierre.CodPrd != null && Precios.Count > 0)
            {
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto != null && x.Producto?.Cod == ordenCierre?.CodPrd)?.Pre ?? 0;
                ordenCierre.Equibalencia = Precios.FirstOrDefault(x => x.Producto != null && x.Producto?.Cod == ordenCierre?.CodPrd)?.Equibalencia ?? 1;
            }
            else
            {
                ordenCierre.Precio = 0;
                ordenCierre.Equibalencia = 1;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetPrecios()
    {
        try
        {

            ZonaCliente zonaCliente = new ZonaCliente();
            zonaCliente.DesCod = ordenCierre.CodDes;
            zonaCliente.CteCod = ordenCierre.CodCte;
            var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos", zonaCliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Precios = response.Response;
                DestinoSeleccionado = ordenCierre.CodDes;
                await ChangeProducto();
                // StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void CancelEdit()
    {
        try
        {
            ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
            isEditing = false;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientesFiltro()
    {
        try
        {
            if (GrupoSeleccionadoFiltro != 0 && GrupoSeleccionadoFiltroB != GrupoSeleccionadoFiltro)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{GrupoSeleccionadoFiltro}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoFiltroB = GrupoSeleccionadoFiltro;
                    ClientesFiltro = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ChangePrecioType()
    {
        try
        {
            if (ordenCierre.CodPrd != null)
            {
                if (Precios.Any(x => x.Producto?.Cod != ordenCierre.CodPrd))
                {
                    ordenCierre.CodPrd = Precios.FirstOrDefault()?.Producto?.Cod;
                }
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).Pre;
                ordenCierre.fchPrecio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).FchDia;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task OpenModal()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosPedidosComponent>("Folios de pedidos", options: new DialogOptions()
                {
                    Width = "90%",
                    Height = "600px",
                    Resizable = true,
                    Draggable = false
                });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ToggleSelection(string? folioDetalle)
    {
        ordenCierre.Folio_Perteneciente = folioDetalle;
        isFolio = true;

        ZonaCliente zonaCliente = new ZonaCliente();
        zonaCliente.DesCod = ordenCierre.CodDes;
        zonaCliente.CteCod = ordenCierre.CodCte;
        var precioFolio = isFolio ? ordenCierre.Folio_Perteneciente : string.Empty;
        var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos/{precioFolio}", zonaCliente);
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Precios = response.Response;
            DestinoSeleccionado = ordenCierre.CodDes;
            await ChangeProducto();
            // StateHasChanged();
        }

        if (!string.IsNullOrEmpty(folioDetalle))
        {
            CierreFiltroDTO filtro_volume = new CierreFiltroDTO();

            filtro_volume.Folio = folioDetalle ?? string.Empty;
            filtro_volume.forFolio = true;
            var responseVolumen = await http.Post<CierreFiltroDTO, VolumenDisponibleDTO>($"api/cierre/volumen/activo", filtro_volume);
            if (responseVolumen.Error)
            {
                var message = await responseVolumen.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
                volumenDisponible = responseVolumen.Response;
        }
        else
        {
            volumenDisponible = new VolumenDisponibleDTO();
        }
        show = false;
    }

    private void FilterFolios()
    {
        foliosFiltro = folioDetalles.Where(x => !string.IsNullOrEmpty(x.Folio) && x.Folio.Contains(folioSearch, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task OpenModalCierre()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosCierresComponent>("Folios de cierres", options: new DialogOptions()
                {
                    Width = "90%",
                    Height = "600px",
                    Resizable = true,
                    Draggable = false
                });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

}
