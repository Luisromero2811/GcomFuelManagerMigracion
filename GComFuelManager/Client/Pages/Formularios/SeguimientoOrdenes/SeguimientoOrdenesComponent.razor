@page "/seguimiento/ordenes"
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject IJSRuntime JS
@inject HttpClient Http

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Credito, Contador, Auditor, Ejecutivo de Cuenta Operativo")]
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Credito, Contador, Auditor, Ejecutivo de Cuenta Operativo" Context="Seguimiento">
    <!--Maquetación de formularios-->
    <h4><b>Seguimiento de Órdenes</b></h4>
    <div class="row">
        <div class="col-12 card shadow-sm">
            <div class="col-12 card-body">
                <label><b>Mostrar Ordenes:</b></label>
                <EditForm Model="@ordenEmbarque">
                    <DataAnnotationsValidator />
                    <div class="row col-12">
                        <div class="col-4">
                            <div class="col-12">
                                <label class="form-label" for="form2Example17">Del:</label>
                                <InputDate class="form-control" @bind-Value="@busquedaOrdenes.DateInicio" @bind-Value:format="yyyy-MM-dd" Type="InputDateType.Date" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-outline">
                                <label class="form-label" for="form2Example17">Al:</label>
                                <InputDate class="form-control" @bind-Value="@busquedaOrdenes.DateFin" @bind-Value:format="yyyy-MM-dd" Type="InputDateType.Date" />
                            </div>
                        </div>
                        <div class="col-4 d-flex mt-auto">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@MostrarOrdenFechaRadio">
                                <i class="fa fa-solid fa-eye"></i>
                                <b>Mostrar Ordenes</b>
                                @if (loadingFiltro)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                        <div class="row col-12 mt-3">
                            <div class="d-flex justify-content-center">
                                <div class="form-check form-check-inline">
                                    <input type="radio" class="form-check-input" id="SinCargar" name="estatus" checked="@(busquedaOrdenes.Estado == 1)" @onchange="@(()=>busquedaOrdenes.Estado = 1)" />
                                    <label class="form-check-label" for="SinCargar">Sin Cargar</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" id="Cargadas" name="estatus" checked="@(busquedaOrdenes.Estado == 2)" @onchange="@(()=>busquedaOrdenes.Estado = 2)" />
                                    <label class="form-check-label" for="Cargadas">Cargadas</label>
                                </div>
                                @*<div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" id="Trayecto" name="estatus" checked="@(fechas.Estado == 3)" @onchange="@(()=>fechas.Estado = 3)" />
                                    <label class="form-check-label" for="Trayecto">En Trayecto</label>
                                    </div>*@
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" id="Canceladas" name="estatus" checked="@(busquedaOrdenes.Estado == 4)" @onchange="@(()=>busquedaOrdenes.Estado = 4)" />
                                    <label class="form-check-label" for="Canceladas">Canceladas</label>
                                </div>
                                <AuthorizeView Roles="Programador, Admin, Administrador Sistema, Direccion, Gerencia" Context="Todos">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" id="Todas" name="estatus" checked="@(busquedaOrdenes.Estado == 5)" @onchange="@(()=>busquedaOrdenes.Estado = 5)" />
                                        <label class="form-check-label" for="Todas">Todas</label>
                                    </div>
                                </AuthorizeView>

                            </div>
                        </div>
                    </div>
                    <div class="row d-flex mt-3 col-12 justify-content-center">
                        <div class="col-4">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportExcel"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Exportar</b></button>
                        </div>
                        <div class="col-4">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportHist"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Historial de órdenes</b></button>
                        </div>
                        @*<div class="col-3">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportTraffic"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Exportar Tráfico</b></button>
                            </div>
                            <div class="col-3">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@MostrarTraffic"><i class="fa fa-solid fa-eye"></i> <b>Tráfico</b></button>

                            </div>*@
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div>
        Total de registros: @ordens?.Count()
    </div>
    <!--Maquetación de Tabla con Radzen-->
    <div class="col-12 ancho-tabla overflow-scroll mt-4" style="height:450px;resize:both;">
        <table class="table table-sm table-bordered table-hover" id="miTabla">
            <thead class="fila">
                <tr style="max-height:50px;white-space:nowrap;">
                    @if (!Esta_En_Tuxpan)
                    {
                        <th>Vale de Retiro</th>
                    }
                    <th>Referencia</th>
                    <th>Fecha Programa</th>
                    <th>Unidad de Negocio</th>
                    <th>Estatus Orden</th>
                    <th>Fecha Carga</th>
                    <th>BOL / EMBARQUE</th>
                    <th>Modelo de Venta</th>
                    @*<th>Tipo de Venta</th>*@
                    <th class="resizable-column" style="width:300px !important;">Grupo</th>
                    <th class="resizable-column" style="width:300px !important;">Cliente</th>
                    <th class="resizable-column" style="width:300px !important;">Destino</th>
                    <th class="resizable-column" style="width:300px !important;">Producto</th>
                    <th>Volumen Solicitado</th>
                    <th>Volumen Cargado</th>
                    <th>Transportista</th>
                    <th>Unidad</th>
                    <th>Operador</th>

                </tr>
            </thead>
            <tbody>
                <tr class="fila">
                    @if (!Esta_En_Tuxpan)
                    {
                        <td></td>
                    }
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    @*<td></td>*@
                    <td>
                        @*<RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.grupo" />*@
                        <input type="text" class="form-control form-control-sm" @oninput="@((args)=>Filtrar_Grupos(args))" />
                    </td>
                    <td>
                        @*<RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.cliente" />*@
                        <input type="text" class="form-control form-control-sm" @oninput="@((args)=>Filtrar_Clientes(args))" />
                    </td>
                    <td>
                        @*<RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.destino" />*@
                        <input type="text" class="form-control form-control-sm" @oninput="@((args)=>Filtrar_Destinos(args))" />
                    </td>
                    <td>
                        @*<RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.producto" />*@
                        <input type="text" class="form-control form-control-sm" @oninput="@((args)=>Filtrar_Productos(args))" />
                    </td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                @if (ordens is null)
                {
                    <tr>
                        <td colspan="18">
                            <p>No hay órdenes</p>
                        </td>
                    </tr>
                }
                else if (ordens?.Count > 0)
                {
                    @foreach (var item in ordens)
                    {
                        <tr>
                            @if (!Esta_En_Tuxpan)
                            {
                                <td>
                                    @if (item.OrdenEmbarque is not null)
                                    {
                                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(() => Descargar_Pdf(item.OrdenEmbarque))" type="button">
                                            <i class="fa fa-solid fa-download"></i>Vale
                                        </button>
                                    }
                                </td>
                            }
                            <td>
                                <RadzenText Text="@item.Ref" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                @(item?.BatchId is null ? item?.Fchcar?.ToString("dd/MM/yyyy") : item?.OrdenEmbarque?.Fchcar?.ToString("dd/MM/yyyy"))
                            </td>
                            <td>
                                @(item?.Terminal is not null ? item.Terminal.Den : "Sin unidad de negocio")
                            </td>
                            <td>
                                <RadzenText Text="@item?.Estado?.den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                @(item?.Fchcar is not null && item?.BatchId is not null ? item?.Fchcar : "")
                            </td>
                            <td>
                                <RadzenText Text="@item?.BatchId.ToString()" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                <RadzenText Text="@item?.OrdenEmbarque?.Modelo_Venta_Orden.ToString()" TextStyle="TextStyle.Body2" />
                            </td>
                            @*<td>
                                <RadzenText Text="@item?.Destino?.Cliente?.Tipven" TextStyle="TextStyle.Body2" />
                            </td>*@
                            <td>
                                <RadzenText Text="@item?.OrdenEmbarque?.OrdenCierre?.Grupo?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                <RadzenText Text="@item?.Destino?.Cliente?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                <RadzenText Text="@item?.Destino?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                <RadzenText Text="@item?.Producto?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                @if (busquedaOrdenes.Estado == 1)
                                {
                                    <div class="col-12">
                                        @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",

                                                 item?.Compartimento == 1 ? item?.Tonel?.Capcom
                                                 : item?.Compartimento == 2 ? item?.Tonel?.Capcom2
                                                 : item?.Compartimento == 3 ? item?.Tonel?.Capcom3
                                                 : item?.Compartimento == 4 ? item?.Tonel?.Capcom4
                                                 : item?.Vol
                                                 )
                                    </div>
                                }
                                else
                                {
                                    @*<div class="col-12">
                                            @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                                                     item?.Vol2
                                                     )
                                        </div>*@
                                    <div class="col-12">
                                        @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",

                                                 item?.Compartimento == 1 ? item?.Tonel?.Capcom
                                                 : item?.Compartimento == 2 ? item?.Tonel?.Capcom2
                                                 : item?.Compartimento == 3 ? item?.Tonel?.Capcom3
                                                 : item?.Compartimento == 4 ? item?.Tonel?.Capcom4
                                                 : item?.Vol
                                                 )
                                    </div>
                                }
                            </td>
                            <td>
                                @if (item?.BatchId is null)
                                {

                                }
                                else
                                {
                                    <div class="col-12">
                                        @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                                                 item?.Vol)
                                    </div>
                                }
                            </td>
                            <td>
                                <RadzenText Text="@item?.Tonel?.Transportista?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                            <td>
                                @item?.Tonel?.Tracto @item?.Tonel?.Placa
                            </td>
                            <td>
                                <RadzenText Text="@item?.Chofer?.Den" TextStyle="TextStyle.Body2" />
                            </td>
                        </tr>
                    }

                }
                else if (ordens?.Count == 0)
                {
                    <tr>
                        <td colspan="18">
                            <p>No hay órdenes</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</AuthorizeView>
<style type="text/css">
    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .fila td {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 28px;
        background-color: #f2f2f2;
    }

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

    .sticky-column-header {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 2;
        background-color: white;
    }

    .sticky-column, .sticky-column + th, .sticky-column + td {
        min-width: 180px;
    }

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px;
            background: transparent;
        }
</style>

@code {
    //Grid
    private RadzenDataGrid<Orden>? Grid = new RadzenDataGrid<Orden>();

    private string ProductosSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    private string DestinosSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ClientesSeleccionados = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    private ICollection<Orden> ordens { get; set; } = null!;
    private ICollection<Orden> ordensHistorial { get; set; } = null!;
    //
    private Orden ordenEmbarque { get; set; } = new Orden();
    //private IEnumerable<Orden> ordeness { get; set; } = new List<Orden>();
    //Listas
    private List<CodDenDTO> Destinos { get; set; } = null!;

    //Selecciones
    private int DestinoSeleccionado = 0;

    //Fechas
    public DateTime Date { get; set; } = DateTime.Now;
    public DateTime Date1 { get; set; } = DateTime.Now;
    public DateTime Date2 { get; set; } = DateTime.Now;

    public int Estado { get; set; } = 1;

    bool loadingFiltro = false;
    bool Status = false;
    FechasF fechas = new FechasF();
    OrdenesDTO ordenes = new OrdenesDTO();

    List<OrdenesDTO> SeguimientoOrden { get; set; } = new List<OrdenesDTO>();
    Dictionary<string, string> query = new Dictionary<string, string>();
    ParametrosBusquedaOrdenes busquedaOrdenes = new ParametrosBusquedaOrdenes();

    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;

    protected override async Task OnInitializedAsync()
    {
        await Checar_Terminal();
    }

    private async Task Filtrar_Grupos(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            busquedaOrdenes.grupo = e.Value.ToString();
            await LoadData();
        }
    }

    private async Task Filtrar_Clientes(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            busquedaOrdenes.cliente = e.Value.ToString();
            await LoadData();
        }
    }

    private async Task Filtrar_Destinos(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            busquedaOrdenes.destino = e.Value.ToString();
            await LoadData();
        }
    }

    private async Task Filtrar_Productos(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            busquedaOrdenes.producto = e.Value.ToString();
            await LoadData();
        }
    }

    public async Task MostrarOrdenFechaRadio()
    {
        try
        {
            query = new Dictionary<string, string>();
            query["DateInicio"] = busquedaOrdenes.DateInicio.ToString("MM/dd/yyyy") ?? string.Empty;
            query["DateFin"] = busquedaOrdenes.DateFin.ToString("MM/dd/yyyy") ?? string.Empty;
            query["Estado"] = busquedaOrdenes.Estado.ToString() ?? string.Empty;
            query["producto"] = busquedaOrdenes.producto ?? string.Empty;
            query["cliente"] = busquedaOrdenes.cliente ?? string.Empty;
            query["grupo"] = busquedaOrdenes.grupo ?? string.Empty;
            query["destino"] = busquedaOrdenes.destino ?? string.Empty;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            Status = true;
            var responseHttp = await repositorio.Get<List<Orden>>($"api/pedido/filtro?{uri}");


            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                Status = false;
                loadingFiltro = false;
                ordens = responseHttp.Response;

                //DestinoList = ordens?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                //ClienteList = ordens?.DistinctBy(x => x.Destino?.Cliente?.Den).Select(x => x.Destino?.Cliente?.Den)!;
                //ProductList = ordens?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadData()
    {
        Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["producto"] = busquedaOrdenes.producto;
        queryStringObject["destino"] = busquedaOrdenes.destino;
        queryStringObject["cliente"] = busquedaOrdenes.cliente;
        queryStringObject["grupo"] = busquedaOrdenes.grupo;

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await MostrarOrdenFechaRadio();
    }

    public async Task ExportExcel()
    {
        try
        {
            if (ordens.Count != 0)
            {
                if (busquedaOrdenes.Estado == 1 || busquedaOrdenes.Estado == 4)
                {
                    foreach (var item in ordens!)
                    {
                        if ((item.Destino!.Cliente!.Den == ClientesSeleccionados || string.IsNullOrEmpty(ClientesSeleccionados))
                            && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
                            && (item.Producto!.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado)))
                            SeguimientoOrden.Add(new OrdenesDTO
                            {
                                Referencia = item?.Ref,
                                FechaPrograma = item?.Fchcar?.ToString("dd/MM/yyyy"),
                                Unidad_Negocio = item?.Terminal?.Den,
                                EstatusOrden = item?.Estado.den,
                                //FechaCarga = item?.Fch?.ToString("yyyy-MM-dd"),
                                Bol = item?.BatchId,
                                //DeliveryRack = item?.Destino?.Cliente?.Tipven,
                                Cliente = item?.Destino?.Cliente?.Den,
                                Destino = item?.Destino?.Den,
                                Producto = item?.Producto?.Den,
                                VolNat = item.Compartimento == 1 ? Convert.ToDouble(item.Tonel.Capcom) : item.Compartimento == 2 ? Convert.ToDouble(item.Tonel.Capcom2) : item.Compartimento == 3 ? Convert.ToDouble(item.Tonel.Capcom3) : item.Compartimento == 4 ? item.Tonel.Capcom4 : item?.Vol,
                                VolCar = null!,
                                Transportista = item?.Tonel?.Transportista?.Den,
                                Unidad = item?.Tonel?.Veh,
                                Operador = item?.Chofer?.Den,
                            });
                    }
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    var excel = new ExcelPackage();
                    var worksheet = excel.Workbook.Worksheets.Add("Ordenes");
                    worksheet.Columns.Width = 60;
                    worksheet.Columns.AutoFit();

                    //Formacion del excel
                    var header = worksheet.Cells["A1:N1"];
                    header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                    var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<OrdenesDTO>(SeguimientoOrden, true);
                    tablebody.Style.Font.Bold = true;
                    tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //Guardado de Excel
                    await JS.GuardarComo($"Ordenes{DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")}.xlsx", excel.GetAsByteArray());
                    SeguimientoOrden.Clear();
                }
                else
                {
                    foreach (var item in ordens!)
                    {
                        if ((item.Destino!.Cliente!.Den == ClientesSeleccionados || string.IsNullOrEmpty(ClientesSeleccionados))
                            && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
                            && (item.Producto!.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado)))
                            SeguimientoOrden.Add(new OrdenesDTO
                            {
                                Referencia = item?.Ref,
                                FechaPrograma = item?.OrdenEmbarque?.Fchcar?.ToString("dd/MM/yyyy"),
                                Unidad_Negocio = item?.Terminal?.Den,
                                EstatusOrden = item?.Estado.den,
                                FechaCarga = item?.Fchcar?.ToString("dd/MM/yyyy HH:mm:ss"),
                                Bol = item?.BatchId,
                                //DeliveryRack = item?.Destino?.Cliente?.Tipven,
                                Cliente = item?.Destino?.Cliente?.Den,
                                Destino = item?.Destino?.Den,
                                Producto = item?.Producto?.Den,
                                VolNat = item.Compartimento == 1 ? Convert.ToDouble(item.Tonel.Capcom) : item.Compartimento == 2 ? Convert.ToDouble(item.Tonel.Capcom2) : item.Compartimento == 3 ? Convert.ToDouble(item.Tonel.Capcom3) : item.Compartimento == 4 ? item.Tonel.Capcom4 : item?.Vol,
                                VolCar = item?.Vol,
                                Transportista = item?.Tonel?.Transportista?.Den,
                                Unidad = item?.Tonel?.Veh,
                                Operador = item?.Chofer?.Den
                            });
                    }
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    var excel = new ExcelPackage();
                    var worksheet = excel.Workbook.Worksheets.Add("Ordenes");
                    worksheet.Columns.Width = 60;
                    worksheet.Columns.AutoFit();

                    //Formacion del excel
                    var header = worksheet.Cells["A1:N1"];
                    header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                    var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<OrdenesDTO>(SeguimientoOrden, true);
                    tablebody.Style.Font.Bold = true;
                    tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //Guardado de Excel
                    await JS.GuardarComo($"Ordenes_{DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")}.xlsx", excel.GetAsByteArray());
                    SeguimientoOrden.Clear();
                }
                //foreach (var item in ordens!)
                //{
                //    if ((item.Destino!.Cliente!.Den == ClientesSeleccionados || string.IsNullOrEmpty(ClientesSeleccionados))
                //        && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
                //        && (item.Producto!.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado)))
                //        SeguimientoOrden.Add(new OrdenesDTO
                //        {
                //            Referencia = item?.Ref,
                //            FechaPrograma = item?.Fchcar?.ToString("yyyy-MM-dd"),
                //            EstatusOrden = item?.Estado.den,
                //            FechaCarga = item?.Fch?.ToString("yyyy-MM-dd"),
                //            Bol = item?.BatchId,
                //            //DeliveryRack = item?.Destino?.Cliente?.Tipven,
                //            Cliente = item?.Destino?.Cliente?.Den,
                //            Destino = item?.Destino?.Den,
                //            Producto = item?.Producto?.Den,
                //            VolNat = item?.Vol2,
                //            VolCar = item?.Vol,
                //            Transportista = item?.Tonel?.Transportista?.Den,
                //            Unidad = item?.Tonel?.Veh,
                //            Operador = item?.Chofer?.Den
                //        });
                //}
                //ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //var excel = new ExcelPackage();
                //var worksheet = excel.Workbook.Worksheets.Add("Ordenes");
                //worksheet.Columns.Width = 60;
                //worksheet.Columns.AutoFit();

                ////Formacion del excel
                //var header = worksheet.Cells["A1:N1"];
                //header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                //header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                //var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<OrdenesDTO>(SeguimientoOrden, true);
                //tablebody.Style.Font.Bold = true;
                //tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                ////Guardado de Excel
                //await JS.GuardarComo($"Ordenes_{DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
                //SeguimientoOrden.Clear();
            }
            else
            {
                await swal.FireAsync("Alerta", "Debe de tener datos filtrados para poder exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    //public async Task ExportTraffic()
    //{

    //    try
    //    {
    //        if (ordens.Count != 0)
    //        {
    //            foreach (var item in ordens)
    //            {
    //                if ((item.Destino!.Cliente!.Den == ClientesSeleccionados || string.IsNullOrEmpty(ClientesSeleccionados))
    //                    && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
    //                    && (item.Producto!.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado)))
    //                    SeguimientoOrden.Add(new OrdenesDTO
    //                    {
    //                        Referencia = item?.Ref,
    //                        FechaPrograma = item?.Fchcar?.ToString("yyyy-MM-dd"),
    //                        EstatusOrden = "CLOSED",
    //                        FechaCarga = item?.Fch?.ToString("yyyy-MM-dd"),
    //                        Bol = item?.BatchId,
    //                        //DeliveryRack = item?.Destino?.Cliente?.Tipven,
    //                        Cliente = item?.Destino?.Cliente?.Den,
    //                        Destino = item?.Destino?.Den,
    //                        Producto = item?.Producto?.Den,
    //                        VolNat = item?.Vol2,
    //                        VolCar = item?.Vol,
    //                        Transportista = item?.Tonel?.Transportista?.Den,
    //                        Unidad = item?.Tonel?.Veh,
    //                        Operador = item?.Chofer?.Den
    //                    });
    //            }
    //            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
    //            var excel = new ExcelPackage();
    //            var worksheet = excel.Workbook.Worksheets.Add("Trafico");
    //            worksheet.Columns.Width = 60;
    //            worksheet.Columns.AutoFit();

    //            //Formacion del excel
    //            var header = worksheet.Cells["A1:N1"];
    //            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
    //            header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

    //            var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<OrdenesDTO>(SeguimientoOrden, true);
    //            tablebody.Style.Font.Bold = true;
    //            tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

    //            //Guardado de Excel
    //            await JS.GuardarComo($"Trafico_{DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
    //            SeguimientoOrden.Clear();
    //        }
    //        else
    //        {
    //            await swal.FireAsync("Alerta", "Debe de tener datos filtrados para poder realizar la exportación", SweetAlertIcon.Warning);
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }
    //}
    public async Task ExportHist()
    {
        try
        {
            var responseHttp = await repositorio.Post<FechasF, ICollection<Orden>>($"api/pedido/Historial", fechas);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);

            }
            else
            {
                ordensHistorial = responseHttp.Response;
                foreach (var item in ordensHistorial)
                {
                    if (item.BatchId == null)
                    {
                        SeguimientoOrden.Add(new OrdenesDTO
                        {
                            Referencia = item?.Ref,
                            FechaPrograma = item?.Fchcar?.ToString("dd/MM/yyyy"),
                            Unidad_Negocio = item?.Terminal?.Den,
                            EstatusOrden = item?.Estado.den,
                            Bol = item?.BatchId,
                            Cliente = item?.Destino?.Cliente?.Den,
                            Destino = item?.Destino?.Den,
                            Producto = item?.Producto?.Den,
                            VolNat = item.Compartimento == 1 ? Convert.ToDouble(item?.Tonel?.Capcom) : item.Compartimento == 2 ? Convert.ToDouble(item?.Tonel?.Capcom2) : item.Compartimento == 3 ? Convert.ToDouble(item?.Tonel?.Capcom3) : item.Compartimento == 4 ? item?.Tonel?.Capcom4 : item?.Vol,
                            VolCar = null!,
                            Transportista = item?.Tonel?.Transportista?.Den,
                            Unidad = item?.Tonel?.Veh,
                            Operador = item?.Chofer?.Den,
                        });
                    }
                    else
                    {
                        //Cambio de seguridad
                        SeguimientoOrden.Add(new OrdenesDTO
                        {
                            //Referencia = item?.Ref,
                            //FechaPrograma = item?.Fchcar?.ToString("yyyy-MM-dd"),
                            //EstatusOrden = item?.Estado.den,
                            //FechaCarga = item?.Fch?.ToString("yyyy-MM-dd HH:mm:ss"),
                            //Bol = item?.BatchId,
                            ////DeliveryRack = o?.Destino?.Cliente?.Tipven,
                            //Cliente = item?.Destino?.Cliente?.Den,
                            //Destino = item?.Destino?.Den,
                            //Producto = item?.Producto?.Den,
                            //VolNat = item?.Vol2,
                            //VolCar = item?.Vol,
                            //Transportista = item?.Tonel?.Transportista?.Den,
                            //Unidad = item?.Tonel?.Veh,
                            //Operador = item?.Chofer?.Den
                            Referencia = item?.Ref,
                            FechaPrograma = item?.OrdenEmbarque?.Fchcar?.ToString("dd/MM/yyyy"),
                            Unidad_Negocio = item?.Terminal?.Den,
                            EstatusOrden = item?.Estado.den,
                            FechaCarga = item?.Fchcar?.ToString("dd/MM/yyyy HH:mm:ss"),
                            Bol = item?.BatchId,
                            //DeliveryRack = item?.Destino?.Cliente?.Tipven,
                            Cliente = item?.Destino?.Cliente?.Den,
                            Destino = item?.Destino?.Den,
                            Producto = item?.Producto?.Den,
                            VolNat = item.Compartimento == 1 ? Convert.ToDouble(item.Tonel.Capcom) : item.Compartimento == 2 ? Convert.ToDouble(item.Tonel.Capcom2) : item.Compartimento == 3 ? Convert.ToDouble(item.Tonel.Capcom3) : item.Compartimento == 4 ? item.Tonel.Capcom4 : item?.Vol,
                            VolCar = item?.Vol,
                            Transportista = item?.Tonel?.Transportista?.Den,
                            Unidad = item?.Tonel?.Veh,
                            Operador = item?.Chofer?.Den
                        });
                    }
                }

                //Quitar errores por terminos de licencia al momento de descargar el archivo
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //// Generacion Excel  //
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("Historial");
                worksheet.Columns.Width = 49;
                worksheet.Columns.AutoFit();
                ////Formación de Excel
                var header = worksheet.Cells["A1:N1"];
                //var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
                //from o in ordensHistorial
                //select new OrdenesDTO()
                //{
                //    //Òrdenes sin cargar aplicarle el Volumen natural acorde al volumen del Tonel, en ordenes cargadas ajustar la fecha de programa como la fecha de carga de ordenEmbarque
                //    Referencia = o?.Ref,
                //    FechaPrograma = o?.Fchcar?.ToString("yyyy-MM-dd"),
                //    EstatusOrden = o?.Estado.den,
                //    FechaCarga = o?.Fch?.ToString("yyyy-MM-dd HH:mm:ss"),
                //    Bol = o?.BatchId,
                //    //DeliveryRack = o?.Destino?.Cliente?.Tipven,
                //    Cliente = o?.Destino?.Cliente?.Den,
                //    Destino = o?.Destino?.Den,
                //    Producto = o?.Producto?.Den,
                //    VolNat = o?.Vol2,
                //    VolCar = o?.Vol,
                //    Transportista = o?.Tonel?.Transportista?.Den,
                //    Unidad = o?.Tonel?.Veh,
                //    Operador = o?.Chofer?.Den

                //}
                //  , true);
                //tablebody.Style.Font.Bold = true;
                //tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //var header = worksheet.Cells["A1:M1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<OrdenesDTO>(SeguimientoOrden, true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                //Guardado de Excel
                await JS.GuardarComo($"HistorialDespacho_{DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
                SeguimientoOrden.Clear();
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task Descargar_Pdf(OrdenEmbarque orden)
    {
        try
        {
            var response = await repositorio.Post<OrdenEmbarque, byte[]>($"api/pdf/vale", orden);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await JS.GuardarComo($"Vale_De_Retiro_{orden.Bin}_{orden.Compartment}.pdf", response.Response);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    bool Esta_En_Tuxpan = true;
    private async Task Checar_Terminal()
    {
        try
        {
            var response = await repositorio.Get<Tad>($"api/terminal/check");
            //var response = await repositorio.Post<List<OrdenEmbarque>>($"api/services/simulacion/synthesis", ordens);

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Esta_En_Tuxpan = response.Response.Cod == 1;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}