@page "/inventarios/cierres"
@inject IRepositorio http
@inject IJSRuntime js
@inject NotificationService ns
@inject InventarioValidator validator
@inject SweetAlertService Swal
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Inventarios")]

<Card HeaderText="Inventarios cerrados" BodyClass="col-12 row">
    <Body>
        <div class="col-6 row">
            <div class="col-4">
                <label>De:</label>
                <InputDate @bind-Value="Filtro.Fecha_Inicio" Type="InputDateType.Date" class="form-control form-control-sm" />
            </div>
            <div class="col-4">
                <label>A:</label>
                <InputDate @bind-Value="Filtro.Fecha_Fin" Type="InputDateType.Date" class="form-control form-control-sm" />
            </div>
            <div class="col-2 d-flex">
                <button class="btn btn-sm gcom-bg-amarillo mt-auto" @onclick="CargarCierres">
                    <i class="fa fa-solid fa-magnifying-glass" />
                </button>
            </div>
        </div>
        <div class="col-6 d-flex justify-content-end">
            <button class="btn bt-sm col-3 gcom-bg-amarillo mt-auto" @onclick="Exportar">
                <i class="fa fa-solid fa-file-excel" />
                Exportar
            </button>
        </div>
    </Body>
</Card>
<div class="ancho-tabla mt-2">
    <Tabla Datos="Cierres">
        <Cabeceras>
            <tr>
                <th style="width:120px;" class="resizable-column">Acciones</th>
                <th style="width:150px;" class="resizable-column">Fecha de cierre</th>
                <th style="width:150px;" class="resizable-column">Producto</th>
                <th style="width:150px;" class="resizable-column">Sitio</th>
                <th style="width:150px;" class="resizable-column">Almacen</th>
                <th style="width:150px;" class="resizable-column">Localidad</th>
                <th style="width:150px;" class="resizable-column">Inventario fisico</th>
                <th style="width:150px;" class="resizable-column">Fisica reservada</th>
                <th style="width:150px;" class="resizable-column">Fisico disponible</th>
                <th style="width:150px;" class="resizable-column">Pedido total</th>
                <th style="width:150px;" class="resizable-column">Ordenada reservada</th>
                <th style="width:150px;" class="resizable-column">En orden</th>
                <th style="width:150px;" class="resizable-column">Total disponible</th>
                <th style="width:150px;" class="resizable-column">Total disponible en full</th>
            </tr>
        </Cabeceras>
        <Filtros>
            <tr>
                <td></td>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.ProductoId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Productos)
                        {
                            <option value="@item.Cod">@item.Den</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.SitioId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Sitios)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.AlmacenId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Almacenes)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.LocalidadId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Localidades)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </Filtros>
        <Columnas Context="inv">
            <tr>
                <td>
                    <div class="btn-group col-12">
                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>AbrirDetalleCierre(inv))">
                            <i class="fa fa-solid fa-eye" />
                        </button>
                        <AuthorizeView Roles="Admin, Administrador Sistema, Abrir Cierres Inventario">
                            <Authorized>
                                <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>AbrirCierres(inv))">
                                    <i class=@($"fa fa-solid {(inv.Abierto ? "fa-lock" : "fa-unlock")}") />
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        @if (inv.Abierto)
                        {
                            <NavLink class="btn btn-sm gcom-bg-amarillo" href="@($"inventarios/{inv.Id}")">
                                <i class="fa fa-solid fa-edit" />
                            </NavLink>
                        }
                    </div>
                </td>
                <td>@inv.FechaCierre.ToShortDateString()</td>
                <td>@inv.Producto</td>
                <td>@inv.Sitio</td>
                <td>@inv.Almacen</td>
                <td>@inv.Localidad</td>
                <td>@inv.Fisico.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.Reservado.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.Disponible.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.PedidoTotal.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.OrdenReservado.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.EnOrden.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.TotalDisponible.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.TotalDisponibleFull.ToString("N2", CultureInfo.InvariantCulture)</td>
            </tr>
        </Columnas>
    </Tabla>
</div>
<div class="col-12">
    <PaginacionComponent PaginaActual="Filtro.Pagina_ACtual" PaginasTotales="Filtro.Total_paginas" PaginaSeleccionada="SeleccionarPagina" />
    <div class="col-12">
        <p>Total de registros: @Filtro.Total_registros</p>
    </div>
</div>

<Modal_Custom @ref="modal_" />

@code {
    Modal_Custom modal_ = new();
    InventarioCierreDTO Filtro = new();
    List<InventarioCierreDTO> Cierres = new();
    bool loading = false;
    Dictionary<string, string> query = new();

    IEnumerable<Producto> Productos = new List<Producto>();
    IEnumerable<CatalogoValorDTO> Sitios = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> Almacenes = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> Localidades = new List<CatalogoValorDTO>();

    protected override async Task OnInitializedAsync()
    {
        Filtro.Fecha_Fin = Filtro.Fecha_Fin.AddDays(1);
        await CargarCierres();
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[nameof(Filtro.ProductoId)] = Filtro.ProductoId.ToString();
        query[nameof(Filtro.SitioId)] = Filtro.SitioId.ToString();
        query[nameof(Filtro.AlmacenId)] = Filtro.AlmacenId.ToString();
        query[nameof(Filtro.LocalidadId)] = Filtro.LocalidadId.ToString();
        query[nameof(Filtro.Pagina)] = Filtro.Pagina.ToString();
        query[nameof(Filtro.Registros_por_pagina)] = Filtro.Registros_por_pagina.ToString();
        query[nameof(Filtro.Fecha_Inicio)] = Filtro.Fecha_Inicio.ToString("MM-dd-yyyy");
        query[nameof(Filtro.Fecha_Fin)] = Filtro.Fecha_Fin.ToString("MM-dd-yyyy");
        query[nameof(Filtro.PorFecha)] = true.ToString();

        return query;
    }

    private async Task CargarCierres()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = false.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<List<InventarioCierreDTO>>($"api/inventario/cierre?{url}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                Cierres = response.Response;
                Filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
                Filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                Filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task SeleccionarPagina(int pagina)
    {
        Filtro.Pagina = pagina;
        Filtro.Pagina_ACtual = pagina;
        await CargarCierres();
    }

    private async Task Filtrar(ChangeEventArgs args, string pro)
    {
        switch (pro)
        {
            case nameof(Filtro.ProductoId):
                Filtro.ProductoId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.SitioId):
                Filtro.SitioId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.AlmacenId):
                Filtro.AlmacenId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.LocalidadId):
                Filtro.LocalidadId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            default:
                break;
        }
        await CargarCierres();
    }

    private async Task Exportar()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = true.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<byte[]>($"api/inventario/cierre?{url}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                await js.GuardarComo($"CierresDeInventario_{DateTime.Now.ToString("ddMMyyyyHHmmss")}.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private void AbrirDetalleCierre(InventarioCierreDTO inv)
    {
        modal_.OpenModal<DetalleCierreInventarioComponente>("Detalle de cierre", new Dictionary<string, object> { { "Cierre", inv } });
    }

    private async Task AbrirCierres(InventarioCierreDTO cierre)
    {
        try
        {
            cierre.Abierto = !cierre.Abierto;
            var response = await http.Get<bool>($"api/inventario/cierre/changestatus/{cierre.Id}");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                ns.Notify(new()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = $"Cierre {(cierre.Abierto ? "abierto" : "cerrado")}",
                    });
                await CargarCierres();
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }
}

