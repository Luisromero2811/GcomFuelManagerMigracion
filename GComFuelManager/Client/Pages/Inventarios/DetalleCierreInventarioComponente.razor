@inject IRepositorio http
@inject IJSRuntime js
@inject InventarioValidator validator
@inject SweetAlertService Swal

<div class="col-12 my-1">
    <button class="btn bt-sm col-3 gcom-bg-amarillo" @onclick="Exportar">
        <i class="fa fa-solid fa-file-excel" />
        Exportar
    </button>
</div>
<div style="width:100%; overflow-x:auto;">
    <Tabla Datos="Inventarios">
        <Cabeceras>
            <tr>
                <th style="width: 100px;" class="resizable-column">Producto</th>
                <th style="width: 100px;" class="resizable-column">Sitio</th>
                <th style="width: 100px;" class="resizable-column">Almacen</th>
                <th style="width: 100px;" class="resizable-column">Localidad</th>
                <th style="width: 100px;" class="resizable-column">Fecha Fisica</th>
                <th style="width: 100px;" class="resizable-column">Tipo de movimiento</th>
                <th style="width: 100px;" class="resizable-column">Referencia</th>
                <th style="width: 100px;" class="resizable-column">ID Documento</th>
                <th style="width: 100px;" class="resizable-column">Cantidad</th>
                <th style="width: 100px;" class="resizable-column">Unidad de medida</th>
                <th style="width: 100px;" class="resizable-column">Fecha de ejecucion de cierre</th>
                <th style="width: 150px;" class="resizable-column">Transportista</th>
                <th style="width: 150px;" class="resizable-column">Tonel</th>
                <th style="width: 150px;" class="resizable-column">Inventario</th>
                <th style="width: 150px;" class="resizable-column">Origen / Destino</th>
            </tr>
        </Cabeceras>
        <Filtros>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.TipoMovimientoId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in TiposMovimientos)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.UnidadMedidaId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in UnidadesMedida)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
                <td><input class="form-control form-control-sm" @bind-value="Filtro.Transportista" @oninput="@((args)=>Filtrar(args, nameof(Filtro.Transportista)))" /></td>
                <td><input class="form-control form-control-sm" @bind-value="Filtro.Tonel" @oninput="@((args)=>Filtrar(args, nameof(Filtro.Tonel)))" /></td>
                <td></td>
                <td><input class="form-control form-control-sm" @bind-value="Filtro.OrigenDestino" @oninput="@((args)=>Filtrar(args, nameof(Filtro.OrigenDestino)))" /></td>
            </tr>
        </Filtros>
        <Columnas Context="item">
            <tr>
                <td>@item.Producto</td>
                <td>@item.Sitio</td>
                <td>@item.Almacen</td>
                <td>@item.Localidad</td>
                <td>@item.FechaRegistro.ToShortDateString()</td>
                <td>@item.TipoMovimiento</td>
                <td>@item.Referencia</td>
                <td>@item.Numero</td>
                <td>@item.Cantidad.ToString("N2", CultureInfo.InvariantCulture)</td>
                <td>@item.UnidadMedida</td>
                <td>@(item.FechaCierre?.ToShortDateString() ?? "----")</td>
                <td>@item.Transportista</td>
                <td>@item.Tonel</td>
                <td>@item.TipoInventario</td>
                <td>@item.OrigenDestino</td>
            </tr>
        </Columnas>
    </Tabla>
</div>
<div class="col-12">
    <PaginacionComponent PaginaActual="Filtro.Pagina_ACtual" PaginasTotales="Filtro.Total_paginas" PaginaSeleccionada="SeleccionarPagina" />
    <div class="col-12">
        <p>Total de registros: @Filtro.Total_registros</p>
    </div>
</div>

@code {
    [Parameter] public InventarioCierreDTO Cierre { get; set; } = new();
    List<InventarioDTO> Inventarios = new();

    InventarioDTO Filtro = new();
    bool loading = false;
    Dictionary<string, string> query = new();

    IEnumerable<CatalogoValorDTO> UnidadesMedida = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> TiposMovimientos = new List<CatalogoValorDTO>();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            CatalogoTipoMovimiento(),
            CatalogoUnidadMedida(),
            CargarInventario()
        );
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[nameof(Filtro.TipoMovimientoId)] = Filtro.TipoMovimientoId.ToString();
        query[nameof(Filtro.UnidadMedidaId)] = Filtro.UnidadMedidaId.ToString();
        query[nameof(Filtro.Transportista)] = Filtro.Transportista;
        query[nameof(Filtro.Tonel)] = Filtro.Tonel;
        query[nameof(Filtro.OrigenDestino)] = Filtro.OrigenDestino;
        query[nameof(Filtro.CierreId)] = Cierre.Id.ToString();
        query[nameof(Filtro.FechaNULL)] = Cierre.Id.IsZero() ? true.ToString() : false.ToString();
        query[nameof(Filtro.Pagina)] = Filtro.Pagina.ToString();
        query[nameof(Filtro.Registros_por_pagina)] = Filtro.Registros_por_pagina.ToString();

        return query;
    }

    private async Task CargarInventario()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = false.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<List<InventarioDTO>>($"api/inventario?{url}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                Inventarios = response.Response;
                Filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
                Filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                Filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task SeleccionarPagina(int pagina)
    {
        Filtro.Pagina = pagina;
        Filtro.Pagina_ACtual = pagina;
        await CargarInventario();
    }

    private async Task Filtrar(ChangeEventArgs args, string pro)
    {
        switch (pro)
        {
            case nameof(Filtro.ProductoId):
                Filtro.ProductoId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.SitioId):
                Filtro.SitioId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.AlmacenId):
                Filtro.AlmacenId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.LocalidadId):
                Filtro.LocalidadId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.TipoMovimientoId):
                Filtro.TipoMovimientoId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.UnidadMedidaId):
                Filtro.UnidadMedidaId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.Transportista):
                Filtro.Transportista = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(Filtro.Tonel):
                Filtro.Tonel = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(Filtro.OrigenDestino):
                Filtro.OrigenDestino = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }
        await CargarInventario();
    }

    private async Task Exportar()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = true.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<byte[]>($"api/inventario?{url}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                await js.GuardarComo($"Inventarios_{DateTime.Now.ToString("ddMMyyyyHHmmss")}.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task CatalogoUnidadMedida()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/unidadmedida");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                UnidadesMedida = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CatalogoTipoMovimiento()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/tipomovimiento");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                TiposMovimientos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
