@page "/crm/listado/actividades"
@inject SweetAlertService Swal
@inject IRepositorio repositorio
@inject NotificationService ns
@inject DialogService ds
@inject IJSRuntime Js
<!--Tabla de muestreo de datos de actividades-->
<AuthorizeView Roles="Admin, VER_DETALLE_ACTIVIDAD">
    <Authorized Context="Tabla">
        <div class="card mt-2">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <div>
                        <b>Actividades</b>
                    </div>
                    <div class="btn-group">
                        <NavLink class="g-1 btn gcom-bg-amarillo" href="../" Match="NavLinkMatch.All">
                            <i class="fa fa-solid fa-arrow-left"></i> Volver
                        </NavLink>
                        <AuthorizeView Roles="Admin, VER_HISTORIAL_ACTIVIDAD">
                            <Authorized Context="IRHistorial">
                                <NavLink class="g-1 btn gcom-bg-rojo" href="crm/historial/actividades" Match="NavLinkMatch.All">
                                    Ir a Historial
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-12 my-2 d-flex flex-wrap justify-content-between align-items-center">
            <AuthorizeView Roles="Admin, CREAR_ACTIVIDAD">
                <Authorized Context="CrearActividad">
                    <div class="col-12 col-md-2 mb-2 mb-md-0">
                        <NavLink class="btn btn-sm gcom-bg-amarillo w-100" href="crm/gestion/actividades">
                            <i class="fa fa-solid fa-plus" /> Crear Nueva Actividad
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>
            <div class="col-12 col-md-2 mb-2 mb-md-0">
                <button class="btn btn-sm gcom-bg-amarillo w-100" @onclick="ExportarActividades">
                    <i class="fa fa-solid fa-file-excel"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="ancho-tabla">
            <Tabla Datos="CRMActividades">
                <Cabeceras>
                    <tr>
                        <th style="max-width: 185px;"></th>
                        <th>Fecha de Modificación</th>
                        <th>Asignado A:</th>
                        <th>Cuenta</th>
                        <th>Asunto</th>
                        <th>Contacto</th>
                        <th>Prioridad</th>
                        <th>Estado</th>
                        <th>Fecha de Inicio</th>
                        <th>Fecha de Vencimiento</th>
                        <th>Descripción</th>
                        <th>Habilitar / Deshabilitar</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.VendedorId" @oninput="FiltrarVendedor" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.Cuenta_Rel" @oninput="FiltrarCuenta" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.Asunto" @oninput="FiltrarAsunto" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.Contacto_Rel" @oninput="FiltrarContacto" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.Prioridad" @oninput="FiltrarPrioridad" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="filtro_actividad.Estatus" @oninput="FiltrarEstados" />
                            </div>
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>

                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>
                            <div class="btn-group" role="group">
                                <AuthorizeView Roles="Admin, EDITAR_ACTIVIDAD">
                                    <Authorized Context="EditActivity">
                                        <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/actividades/{item?.Id}")>
                                            <i class="fa fa-solid fa-edit" />
                                        </NavLink>
                                    </Authorized>
                                </AuthorizeView>
                                <NavLink class="btn gcom-bg-amarillo" href="@($"crm/documento/?{nameof(DetalleDocumentoComponente.ActividadId)}={item.Id}")">
                                    <i class="fa fa-solid fa-folder-open" />
                                </NavLink>
                            </div>
                        </td>
                        <td>@(item.Fecha_Mod == null || item.Fecha_Mod == DateTime.MinValue ? "" : item.Fecha_Mod.Value.ToString())</td>
                        <td>@item.VendedorId</td>
                        <td>@item.Cuenta_Rel</td>
                        <td>@item.Asunto</td>
                        <td>@item.Contacto_Rel</td>
                        <td>@item.Prioridad</td>
                        <td>@item.Estatus</td>
                        <td>@item.Fch_Inicio.ToString()</td>
                        <td>@item.Fecha_Ven.ToString()</td>
                        <td>
                            <div class="col-12">
                                <button class="col-12 btn gcom-bg-amarillo" type="button" @onclick="(()=>OpenModal(item.Desccripcion ?? string.Empty))">
                                    <i class="fa-solid fa-eye"></i>
                                </button>
                            </div>
                        </td>
                        <AuthorizeView Roles="Admin, DESACTIVAR_ACTIVIDAD">
                            <Authorized Context="DeshabilitarActividad">
                                <td>
                                    <div class="form-check form-switch m-2">
                                        <input class="form-check-input" type="checkbox" role="switch" id="@item?.Id" checked="@item?.Activo"
                                               @onchange="@((ChangeEventArgs e) => ChangeStatus(item, e))" />
                                    </div>
                                </td>
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
        <div class="col-12">
            <PaginacionComponent PaginaActual="filtro_actividad.Pagina_ACtual" PaginasTotales="filtro_actividad.Total_paginas" PaginaSeleccionada="Pagina_Seleccionada" Radio="5" />
            <div class="col-12">
                <p>Total de registros: @filtro_actividad.Total_registros</p>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    CRMActividadDTO filtro_actividad = new();
    List<CRMActividadDTO> CRMActividades = new();

    Dictionary<string, string> query = new();

    protected override async Task OnInitializedAsync()
    {
        filtro_actividad.Registros_por_pagina = 15;
        await Obtener_Actividades();
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[$"{nameof(filtro_actividad.Asunto)}"] = filtro_actividad.Asunto;
        query[$"{nameof(filtro_actividad.Prioridad)}"] = filtro_actividad.Prioridad;
        query[$"{nameof(filtro_actividad.VendedorId)}"] = filtro_actividad.VendedorId;
        query[$"{nameof(filtro_actividad.Desccripcion)}"] = filtro_actividad.Desccripcion;
        query[$"{nameof(filtro_actividad.Estatus)}"] = filtro_actividad.Estatus;
        query[$"{nameof(filtro_actividad.Contacto_Rel)}"] = filtro_actividad.Contacto_Rel;
        query[$"{nameof(filtro_actividad.Cuenta_Rel)}"] = filtro_actividad.Cuenta_Rel;
        query[$"{nameof(filtro_actividad.Pagina)}"] = filtro_actividad.Pagina.ToString();
        query[$"{nameof(filtro_actividad.Registros_por_pagina)}"] = filtro_actividad.Registros_por_pagina.ToString();
        return query;
    }

    private async Task Obtener_Actividades()
    {
        try
        {
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var responseHttp = await repositorio.Get<List<CRMActividadDTO>>($"api/actividades?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                CRMActividades = responseHttp.Response;

                filtro_actividad.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(responseHttp.HttpResponseMessage);
                filtro_actividad.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(responseHttp.HttpResponseMessage);
                filtro_actividad.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(responseHttp.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarAsunto(ChangeEventArgs args)
    {
        filtro_actividad.Asunto = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }

    private async Task FiltrarPrioridad(ChangeEventArgs args)
    {
        filtro_actividad.Prioridad = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }

    private async Task FiltrarEstados(ChangeEventArgs args)
    {
        filtro_actividad.Estatus = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }

    private async Task FiltrarContacto(ChangeEventArgs args)
    {
        filtro_actividad.Contacto_Rel = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }
    private async Task FiltrarCuenta(ChangeEventArgs args)
    {
        filtro_actividad.Cuenta_Rel = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }

    private async Task FiltrarVendedor(ChangeEventArgs args)
    {
        filtro_actividad.VendedorId = args.Value?.ToString() ?? string.Empty;
        await Obtener_Actividades();
    }

    private async Task Pagina_Seleccionada(int pagina)
    {
        filtro_actividad.Pagina_ACtual = pagina;
        filtro_actividad.Pagina = pagina;

        await Obtener_Actividades();
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task ChangeStatus(CRMActividadDTO actividades, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/actividades/changeStatus/{actividades.Id}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actividad habilitado", Detail = "La actividad ha sido habilitada." });
                }
                else
                {
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actividad deshabilitado", Detail = "La actividad ha sido deshabilitada." });
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task OpenModal(string Desccripcion)
    {
        try
        {
            await ds.OpenAsync<ModalDescriptionComponent>($"Descripción:",
            new Dictionary<string, object>() { { "Desccripcion", Desccripcion } },
                   new DialogOptions() { Height = "70px", Width = "85%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ExportarActividades()
    {
        try
        {
            query[nameof(filtro_actividad.Excel)] = true.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var responseHttp = await repositorio.Get<byte[]>($"api/actividades?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Js.GuardarComo($"Actividades_{DateTime.Today:g}.xlsx", responseHttp.Response);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}
