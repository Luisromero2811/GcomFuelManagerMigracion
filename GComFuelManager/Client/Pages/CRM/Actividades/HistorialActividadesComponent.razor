@inject SweetAlertService Swal
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject DialogService ds
@page "/crm/historial/actividades"
<AuthorizeView Roles="Admin, VER_HISTORIAL_ACTIVIDAD">
    <Authorized Context="Historiales">
        <div class="card mt-2">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <b>Historial de Actividades</b>
                    </div>
                    <div class="btn-group">
                        <NavLink class="btn btn-sm gcom-bg-amarillo" href="../" Match="NavLinkMatch.All">
                            <i class="fa fa-solid fa-arrow-left"></i> Volver
                        </NavLink>
                        <AuthorizeView Roles="Admin, VER_DETALLE_ACTIVIDAD">
                            <Authorized Context="IrActividad">
                                <NavLink class="btn btn-sm gcom-bg-rojo" href="crm/listado/actividades" Match="NavLinkMatch.All">
                                    Ir a Actividades
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-2">
                    <!--Calendarios y boton para filtrar-->
                    <div class="col-12 col-md-3 my-1">
                        <label>De:</label>
                        <input type="date" class="form-control form-control-sm" @bind-value="Listado_Actividad.Fecha_Creacion" />
                    </div>
                    <div class="col-12 col-md-3 my-1">
                        <label>A:</label>
                        <input type="date" class="form-control form-control-sm" @bind-value="Listado_Actividad.Fecha_Ven" />
                    </div>
                    <div class="col-12 col-md-3 my-1 mt-auto">
                        <button class="btn btn-sm gcom-bg-amarillo w-100" @onclick="Get_Activities"><i class="fa-solid fa-magnifying-glass"></i> Buscar</button>
                    </div>
                    <div class="col-12 col-md-3 my-1 mt-auto">
                        <button class="btn btn-sm gcom-bg-amarillo w-100" @onclick="Export_Activities"><i class="fa fa-solid fa-file-excel"></i>Exportar</button>
                    </div>
                </div>
                <!--Tabla de muestreo de datos para mostrar el historial de actividades-->
            </div>
            <div class="col-12">
            </div>
        </div>
        <div class="ancho-tabla">
            <Tabla Datos="ListadoActividad">
                <Cabeceras>
                    <tr>
                        <th style="width:100px;"></th>
                        <th>Asignado A:</th>
                        <th>Cuenta</th>
                        <th>Asunto</th>
                        <th>Contacto</th>
                        <th>Prioridad</th>
                        <th>Descripci贸n</th>
                        <th>Fecha de creaci贸n</th>
                        <th>Fecha de Inicio</th>
                        <th>Fecha de Vencimiento</th>
                        <th>Fecha de Finalizaci贸n</th>
                        <th>Estatus</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="Listado_Actividad.VendedorId" @oninput="FiltrarVendedor" />
                            </div>
                        </td>
                        <td></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="Listado_Actividad.Asunto" @oninput="FiltrarAsunto" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="Listado_Actividad.Contacto_Rel" @oninput="FiltrarContacto" />
                            </div>
                        </td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input type="text" class="form-control" @bind-value="Listado_Actividad.Prioridad" @oninput="FiltrarPrioridad" />
                            </div>
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>
                            <div class="col-12">
                                <NavLink class="col-12 btn gcom-bg-amarillo" href="@($"crm/documento/?{nameof(DetalleDocumentoComponente.ActividadId)}={item.Id}")">
                                    <i class="fa fa-solid fa-folder-open" />
                                </NavLink>
                            </div>
                        </td>
                        <td>@item.VendedorId</td>
                        <td>@item.Cuenta_Rel</td>
                        <td>@item.Asunto</td>
                        <td>@item.Contacto_Rel</td>
                        <td>@item.Prioridad</td>
                        <td>
                            <div class="col-12">
                                <button class="col-12 btn gcom-bg-amarillo" type="button" @onclick="@(()=>OpenModal(item.Desccripcion ?? string.Empty))">
                                    <i class="fa-solid fa-eye"></i>
                                </button>
                            </div>
                        </td>
                        <td>@item.Fecha_Creacion</td>
                        <td>@item.Fch_Inicio</td>
                        <td>@item.Fecha_Ven</td>
                        <td>@item.Fecha_Mod</td>
                        <td>@item.Estatus</td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    CRMActividadDTO Listado_Actividad = new();
    List<CRMActividadDTO> ListadoActividad { get; set; } = new();

    Dictionary<string, string> keys = new();
    Dictionary<string, string> query = new();

    private Dictionary<string, string> SetFiltro()
    {
        keys = new();
        keys["Fecha_Creacion"] = Listado_Actividad.Fecha_Creacion.ToString("MM-dd-yyyy");
        keys["Fecha_Ven"] = Listado_Actividad.Fecha_Ven.ToString("MM-dd-yyyy");
        keys["Asunto"] = Listado_Actividad.Asunto ?? string.Empty;
        keys["Prioridad"] = Listado_Actividad.Prioridad ?? string.Empty;
        keys["VendedorId"] = Listado_Actividad.VendedorId ?? string.Empty;
        keys["Contacto_Rel"] = Listado_Actividad.Contacto_Rel ?? string.Empty;
        return keys;
    }

    private Dictionary<string, string> SetParameter()
    {
        return query;
    }

    public async Task Get_Activities()
    {
        try
        {
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var responseHttp = await repositorio.Get<List<CRMActividadDTO>>($"api/actividades/historial?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ListadoActividad = responseHttp.Response;

                Listado_Actividad.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(responseHttp.HttpResponseMessage);
                Listado_Actividad.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(responseHttp.HttpResponseMessage);
                Listado_Actividad.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(responseHttp.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarAsunto(ChangeEventArgs args)
    {
        Listado_Actividad.Asunto = args.Value?.ToString() ?? string.Empty;
        await Get_Activities();
    }

    private async Task FiltrarContacto(ChangeEventArgs args)
    {
        Listado_Actividad.Contacto_Rel = args.Value?.ToString() ?? string.Empty;
        await Get_Activities();
    }

    private async Task FiltrarVendedor(ChangeEventArgs args)
    {
        Listado_Actividad.VendedorId = args.Value?.ToString() ?? string.Empty;
        await Get_Activities();
    }

    private async Task FiltrarPrioridad(ChangeEventArgs args)
    {
        Listado_Actividad.Prioridad = args.Value?.ToString() ?? string.Empty;
        await Get_Activities();
    }

    private async Task OpenModal(string Desccripcion)
    {
        try
        {
            await ds.OpenAsync<ModalDescriptionComponent>($"Descripci贸n:",
            new Dictionary<string, object>() { { "Desccripcion", Desccripcion } },
                   new DialogOptions() { Height = "70px", Width = "85%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Export_Activities()
    {
        try
        {
            var responseHttp = await repositorio.Post<CRMActividadDTO, byte[]>($"api/actividades/historialExcel", Listado_Actividad);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await js.GuardarComo($"Historial_Actividades_{DateTime.Today:g}.xlsx", responseHttp.Response);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

