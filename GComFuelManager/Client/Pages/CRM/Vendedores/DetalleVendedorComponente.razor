@page "/crm/vendedor/{Id:int}"

@inject IRepositorio http
@inject SweetAlertService swal
@inject NavigationManager navigation
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin, VER_DETALLE_VENDEDORES")]

<AuthorizeView Roles="Admin, VER_DETALLE_VENDEDORES">
    <Authorized>
        <Card LoadingContent="loading_info">
            <Header>
                <div class="col-12 d-flex justify-content-between">
                    <b>Detalle de vendedor</b>
                    <button class="g-1 btn gcom-bg-amarillo" onclick="history.back();" >
                        <i class="fa fa-solid fa-arrow-left" /> Volver
                    </button>
                </div>
            </Header>
            <Body>
                <Card HeaderText="Datos principales">
                    <Body>
                        <div class="col-12 row">
                            <div class="col-md-4 col-12">
                                <label><b>Nombre</b></label>
                                <p>@Vendedor.Nombre</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Apellidos</b></label>
                                <p>@Vendedor.Apellidos</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>División</b></label>
                                <p>@Vendedor.Division?.Nombre</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Titulo</b></label>
                                <p>@Vendedor.Titulo</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Departamento</b></label>
                                <p>@Vendedor.Departamento</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Teléfono de oficina</b></label>
                                <p>@Vendedor.Tel_Oficina</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Teléfono de móvil</b></label>
                                <p>@Vendedor.Tel_Movil</p>
                            </div>
                            <div class="col-md-4 col-12">
                                <label><b>Correo electrónico</b></label>
                                <p>@Vendedor.Correo</p>
                            </div>
                        </div>
                    </Body>
                </Card>
                <Card HeaderText="Contactos">
                    <Body>
                        <div class="container-fluid overflow-scroll">
                            <Tabla Datos="Contactos">
                                <Cabeceras>
                                    <tr>
                                        <th>Contacto</th>
                                        <th>Cuenta</th>
                                        <th>Telfono movil</th>
                                        <th>Correo electronico</th>
                                        <th>Division</th>
                                    </tr>
                                </Cabeceras>
                                <Filtros>
                                    <tr>
                                        <td>
                                            <input class="form-control" @bind-value="filtroContacto.Nombre" placeholder="Filtrar contacto"
                                                   @oninput="@((args) => FiltrarParametros(args, nameof(filtroContacto.Nombre)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroContacto.Cuenta" placeholder="Filtrar correo cuenta"
                                                   @oninput="@((args) => FiltrarParametros(args, nameof(filtroContacto.Cuenta)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroContacto.Tel_Movil" placeholder="Filtrar telefono movil"
                                                   @oninput="@((args) => FiltrarParametros(args, nameof(filtroContacto.Tel_Movil)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroContacto.Correo" placeholder="Filtrar correo electronico"
                                                   @oninput="@((args) => FiltrarParametros(args, nameof(filtroContacto.Correo)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroContacto.Division" placeholder="Filtrar division"
                                                   @oninput="@((args) => FiltrarParametros(args, nameof(filtroContacto.Division)))" />
                                        </td>
                                    </tr>
                                </Filtros>
                                <Columnas Context="item">
                                    <tr>
                                        <AuthorizeView Roles="Admin, VER_DETALLE_CONTACTOS">
                                            <Authorized Context="VERCONTACTO">
                                                <td>
                                                    <NavLink href=@($"crm/contacto/{item.Id}")>
                                                        @item.Nombre @item.Apellidos
                                                    </NavLink>
                                                </td>
                                            </Authorized>
                                            <NotAuthorized Context="VERCONTACTO">
                                                <td>@item.Nombre @item.Apellidos</td>
                                            </NotAuthorized>
                                        </AuthorizeView>
                                        <td>@item.Cuenta</td>
                                        <td>@item.Tel_Movil</td>
                                        <td>@item.Correo</td>
                                        <td>@item.Division</td>
                                    </tr>
                                </Columnas>
                            </Tabla>
                        </div>
                    </Body>
                </Card>
                <div class="col-12">
                    <PaginacionComponent PaginaActual="filtroContacto.Pagina_ACtual" PaginasTotales="filtroContacto.Total_paginas" Radio="5" PaginaSeleccionada="PaginaSeleccionadaContacto" />
                </div>
                <Card HeaderText="Equipos">
                    <Body>
                        <div class="container-fluid overflow-scroll">
                            <Tabla Datos="Equipos">
                                <Cabeceras>
                                    <tr>
                                        <th>Equipo</th>
                                        @* <th>Lider del equipo</th> *@
                                        <th>Division del equipo</th>
                                    </tr>
                                </Cabeceras>
                                <Filtros>
                                    <tr>
                                        <td>
                                            <input class="form-control" @bind-value="filtroEquipo.Nombre" placeholder="Filtrar equipo"
                                                   @oninput="@((args) => FiltrarParametrosEquipos(args, nameof(filtroEquipo.Nombre)))" />
                                        </td>
                                        @* <td>
                                            <input class="form-control" @bind-value="filtroEquipo.Lider" placeholder="Filtrar lider"
                                                   @oninput="@((args) => FiltrarParametrosEquipos(args, nameof(filtroEquipo.Lider)))" />
                                        </td> *@
                                        <td>
                                            <input class="form-control" @bind-value="filtroEquipo.Division" placeholder="Filtrar division"
                                                   @oninput="@((args) => FiltrarParametrosEquipos(args, nameof(filtroEquipo.Division)))" />
                                        </td>
                                    </tr>
                                </Filtros>
                                <Columnas Context="item">
                                    <tr>
                                        <td>@item.Nombre</td>
                                        @* <td>@item.Lider</td> *@
                                        <td>@item.Division</td>
                                    </tr>
                                </Columnas>
                            </Tabla>
                        </div>
                    </Body>
                </Card>
                <div class="col-12">
                    <PaginacionComponent PaginaActual="filtroEquipo.Pagina_ACtual" PaginasTotales="filtroEquipo.Total_paginas" Radio="5" PaginaSeleccionada="PaginaSeleccionadaEquipos" />
                </div>
                <Card HeaderText="Actividades">
                    <Body>
                        <div class="container-fluid overflow-scroll">
                            <Tabla Datos="Actividades">
                                <Cabeceras>
                                    <tr>
                                        <td>Contacto</td>
                                        <td>Cuenta</td>
                                        <td>Asunto</td>
                                        <td>Prioridad</td>
                                        <td>Estado</td>
                                        <td>Asignado A:</td>
                                    </tr>
                                </Cabeceras>
                                <Filtros>
                                    <tr>
                                        <td>
                                            <input class="form-control" @bind-value="filtroActividad.Contacto_Rel" placeholder="Filtrar contacto"
                                                   @oninput="@((args) => FiltrarParametrosActividad(args, nameof(filtroActividad.Contacto_Rel)))" />
                                        </td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroActividad.Estatus" placeholder="Filtrar estado"
                                                   @oninput="@((args) => FiltrarParametrosActividad(args, nameof(filtroActividad.Estatus)))" />
                                        </td>
                                        <td></td>
                                    </tr>
                                </Filtros>
                                <Columnas Context="item">
                                    <tr>
                                        <td>@item.Contacto_Rel</td>
                                        <td>@item.Cuenta_Rel</td>
                                        <td>@item.Asunto</td>
                                        <td>@item.Prioridad</td>
                                        <td>@item.Estatus</td>
                                        <td>@item.VendedorId</td>
                                    </tr>
                                </Columnas>
                            </Tabla>
                        </div>
                    </Body>
                </Card>
                <div class="col-12">
                    <PaginacionComponent PaginaActual="filtroActividad.Pagina_ACtual" PaginasTotales="filtroActividad.Total_paginas"
                                         Radio="5" PaginaSeleccionada="PaginaSeleccionadaActividad" />
                </div>
                <Card HeaderClass="col-12 d-flex justify-content-between">
                    <Header>
                        <b>Oportunidades</b>
                        <div class="col-md-2 col-6">
                            <button class="btn col-12 gcom-bg-amarillo btn-sm g-1" @onclick="ExportarOportunidades">
                                <i class="fa fa-solid fa-file-excel"></i>
                                Exportar
                            </button>
                        </div>
                    </Header>
                    <Body>
                        <div class="container-fluid overflow-scroll">
                            <Tabla Datos="Oportunidades">
                                <Cabeceras>
                                    <tr>
                                        <th>Oportunidad</th>
                                        <th>Equipo</th>
                                        <th>Importe de la oportunidad</th>
                                        <th>Cuenta</th>
                                        <th>Contacto</th>
                                        <th>Etapa de venta</th>
                                    </tr>
                                </Cabeceras>
                                <Filtros>
                                    <tr>
                                        <td>
                                            <input class="form-control" @bind-value="filtroOportunidad.Nombre_Opor" placeholder="Filtrar contacto"
                                                   @oninput="@((args) => FiltrarParametrosOportunidades(args, nameof(filtroOportunidad.Nombre_Opor)))" />
                                        </td>
                                        <td></td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroOportunidad.Equipo" placeholder="Filtrar telefono movil"
                                                   @oninput="@((args) => FiltrarParametrosOportunidades(args, nameof(filtroOportunidad.Equipo)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroOportunidad.Division" placeholder="Filtrar correo electronico"
                                                   @oninput="@((args) => FiltrarParametrosOportunidades(args, nameof(filtroOportunidad.Division)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroOportunidad.Contacto" placeholder="Filtrar correo electronico"
                                                   @oninput="@((args) => FiltrarParametrosOportunidades(args, nameof(filtroOportunidad.Contacto)))" />
                                        </td>
                                        <td>
                                            <input class="form-control" @bind-value="filtroOportunidad.EtapaVenta" placeholder="Filtrar correo electronico"
                                                   @oninput="@((args) => FiltrarParametrosOportunidades(args, nameof(filtroOportunidad.EtapaVenta)))" />
                                        </td>
                                    </tr>
                                </Filtros>
                                <Columnas Context="item">
                                    <tr>
                                        <AuthorizeView Roles="Admin, VER_DETALLE_OPORTUNIDAD">
                                            <Authorized Context="VEROPORTUNIDAD">
                                                <td>
                                                    <NavLink href=@($"crm/oportunidad/{item.Id}")>
                                                        @item.Nombre_Opor
                                                    </NavLink>
                                                </td>
                                            </Authorized>
                                            <NotAuthorized Context="VEROPORTUNIDAD">
                                                @item.Nombre_Opor
                                            </NotAuthorized>
                                        </AuthorizeView>
                                        <td>@item.Equipo</td>
                                        <td>$@item.ValorOportunidad.ToString("N", CultureInfo.InvariantCulture)</td>
                                        <td>@item.Cuenta</td>
                                        <td>@item.Contacto</td>
                                        <td>@item.EtapaVenta</td>
                                    </tr>
                                </Columnas>
                            </Tabla>
                        </div>
                    </Body>
                </Card>
                <div class="col-12">
                    <PaginacionComponent PaginaActual="filtroOportunidad.Pagina_ACtual" PaginasTotales="filtroOportunidad.Total_paginas"
                                         Radio="5" PaginaSeleccionada="PaginaSeleccionadaOportunidades" />
                </div>
            </Body>
        </Card>
    </Authorized>
    <NotAuthorized>
        <NoAutorizado />
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter] public int Id { get; set; } = 0;

    CRMVendedorDetalleDTO Vendedor = new();
    bool loading_info = false;

    CRMContactoDTO filtroContacto = new();
    List<CRMContactoDTO> Contactos = new();

    CRMOportunidadDTO filtroOportunidad = new();
    List<CRMOportunidadDTO> Oportunidades = new();

    CRMActividadDTO filtroActividad = new();
    List<CRMActividadDTO> Actividades = new();

    CRMEquipoDTO filtroEquipo = new();
    List<CRMEquipoDTO> Equipos = new();

    protected override async Task OnParametersSetAsync()
    {
        await ObtenerVendedor();
        await Task.WhenAll(
        ObtenerEquipos(),
        ObtenerContactos(),
        ObtenerActividades(),
        ObtenerOportunidades());
    }

    private async Task ObtenerVendedor()
    {
        try
        {
            loading_info = true;
            var response = await http.Get<CRMVendedorDetalleDTO>($"api/crmvendedor/{Id}/detalle");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Vendedor = response.Response;
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private Dictionary<string, string> SetParametrosContacto()
    {
        var param = new Dictionary<string, string>();

        param[nameof(filtroContacto.Nombre)] = filtroContacto.Nombre;
        param[nameof(filtroContacto.Tel_Movil)] = filtroContacto.Tel_Movil;
        param[nameof(filtroContacto.Correo)] = filtroContacto.Correo;
        param[nameof(filtroContacto.Paginacion)] = true.ToString();
        param[nameof(filtroContacto.Registros_por_pagina)] = filtroContacto.Registros_por_pagina.ToString();
        param[nameof(filtroContacto.Pagina)] = filtroContacto.Pagina.ToString();
        param[nameof(filtroContacto.VendedorId)] = Id.ToString();

        return param;
    }

    private async Task ObtenerContactos()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetParametrosContacto());
            var response = await http.Get<List<CRMContactoDTO>>($"api/crmcontactos?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Contactos = response.Response;

                filtroContacto.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtroContacto.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtroContacto.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarParametros(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(filtroContacto.Nombre):
                filtroContacto.Nombre = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroContacto.Tel_Movil):
                filtroContacto.Tel_Movil = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroContacto.Correo):
                filtroContacto.Correo = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }
        await ObtenerContactos();
    }

    private async Task PaginaSeleccionadaContacto(int pagina)
    {
        filtroContacto.Pagina = pagina;
        filtroContacto.Pagina_ACtual = pagina;
        await ObtenerContactos();
    }

    private Dictionary<string, string> SetParametrosActividades()
    {
        var param = new Dictionary<string, string>();
        param[nameof(filtroActividad.Contacto_Rel)] = filtroActividad.Contacto_Rel;
        param[nameof(filtroActividad.Estatus)] = filtroActividad.Estatus;
        param[nameof(filtroActividad.Paginacion)] = true.ToString();
        param[nameof(filtroActividad.Registros_por_pagina)] = filtroActividad.Registros_por_pagina.ToString();
        param[nameof(filtroActividad.Pagina)] = filtroActividad.Pagina.ToString();
        param[nameof(filtroActividad.Asignado)] = Id.ToString();
        return param;
    }

    private async Task ObtenerActividades()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetParametrosActividades());
            var responseHttp = await http.Get<List<CRMActividadDTO>>($"api/actividades?{uri}");
            if (responseHttp.Error)
            {
                loading_info = false;
                var message = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Actividades = responseHttp.Response;

                filtroActividad.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(responseHttp.HttpResponseMessage);
                filtroActividad.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(responseHttp.HttpResponseMessage);
                filtroActividad.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(responseHttp.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarParametrosActividad(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(filtroActividad.Contacto_Rel):
                filtroActividad.Contacto_Rel = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroActividad.Estatus):
                filtroActividad.Estatus = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;

        }
        await ObtenerActividades();
    }

    private async Task PaginaSeleccionadaActividad(int pagina)
    {
        filtroActividad.Pagina = pagina;
        filtroActividad.Pagina_ACtual = pagina;
        await ObtenerActividades();
    }

    private Dictionary<string, string> SetParametrosOportunidades()
    {
        var param = new Dictionary<string, string>();

        param[nameof(filtroOportunidad.Nombre_Opor)] = filtroOportunidad.Nombre_Opor;
        param[nameof(filtroOportunidad.Equipo)] = filtroOportunidad.Equipo;
        param[nameof(filtroOportunidad.Division)] = filtroOportunidad.Division;
        param[nameof(filtroOportunidad.Vendedor)] = filtroOportunidad.Vendedor;
        param[nameof(filtroOportunidad.Contacto)] = filtroOportunidad.Contacto;
        param[nameof(filtroOportunidad.EtapaVenta)] = filtroOportunidad.EtapaVenta;
        param[nameof(filtroOportunidad.Paginacion)] = true.ToString();
        param[nameof(filtroOportunidad.Registros_por_pagina)] = filtroOportunidad.Registros_por_pagina.ToString();
        param[nameof(filtroOportunidad.Pagina)] = filtroOportunidad.Pagina.ToString();
        param[nameof(filtroOportunidad.VendedorId)] = Id.ToString();

        return param;
    }

    private async Task ObtenerOportunidades()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetParametrosOportunidades());
            var response = await http.Get<List<CRMOportunidadDTO>>($"api/crmoportunidad?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Oportunidades = response.Response;

                filtroOportunidad.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtroOportunidad.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtroOportunidad.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarParametrosOportunidades(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(filtroOportunidad.Nombre_Opor):
                filtroOportunidad.Nombre_Opor = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroOportunidad.Equipo):
                filtroOportunidad.Equipo = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroOportunidad.Division):
                filtroOportunidad.Division = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroOportunidad.Vendedor):
                filtroOportunidad.Vendedor = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroOportunidad.Contacto):
                filtroOportunidad.Contacto = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroOportunidad.EtapaVenta):
                filtroOportunidad.EtapaVenta = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }
        await ObtenerOportunidades();
    }

    private async Task PaginaSeleccionadaOportunidades(int pagina)
    {
        filtroOportunidad.Pagina = pagina;
        filtroOportunidad.Pagina_ACtual = pagina;
        await ObtenerOportunidades();
    }

    private Dictionary<string, string> SetParametrosEquipos()
    {
        var param = new Dictionary<string, string>();

        param[nameof(filtroEquipo.Nombre)] = filtroEquipo.Nombre;
        param[nameof(filtroEquipo.Division)] = filtroEquipo.Division;
        param[nameof(filtroEquipo.Lider)] = filtroEquipo.Lider;
        param[nameof(filtroEquipo.VendedorId)] = Id.ToString();
        param[nameof(filtroEquipo.Paginacion)] = true.ToString();
        param[nameof(filtroEquipo.Registros_por_pagina)] = filtroEquipo.Registros_por_pagina.ToString();
        param[nameof(filtroEquipo.Pagina)] = filtroEquipo.Pagina.ToString();
        return param;
    }

    private async Task ObtenerEquipos()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetParametrosEquipos());
            var response = await http.Get<List<CRMEquipoDTO>>($"api/crmequipo?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Equipos = response.Response;

                filtroEquipo.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtroEquipo.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtroEquipo.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarParametrosEquipos(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(filtroEquipo.Nombre):
                filtroEquipo.Nombre = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroEquipo.Division):
                filtroEquipo.Division = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtroEquipo.Lider):
                filtroEquipo.Lider = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }
        await ObtenerOportunidades();
    }

    private async Task PaginaSeleccionadaEquipos(int pagina)
    {
        filtroEquipo.Pagina = pagina;
        filtroEquipo.Pagina_ACtual = pagina;
        await ObtenerEquipos();
    }

    private async Task ExportarOportunidades()
    {
        try
        {
            loading_info = true;
            var query = SetParametrosOportunidades();

            query.Add(nameof(CRMVendedorDTO.Excel), true.ToString());

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<byte[]>($"api/crmoportunidad?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;

                await js.GuardarComo($"Oportunidades_{DateTime.Now:g}.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }
}
