@page "/crm/contactos"
@inject IRepositorio http
@inject SweetAlertService swal
@inject IJSRuntime Js
@attribute [Authorize(Roles = "Admin, VER_MODULO_CONTACTOS")]

<AuthorizeView Roles="Admin, VER_MODULO_CONTACTOS">
    <Authorized>
        <Card>
            <Header>
                <div class="d-flex justify-content-between">
                    <div>
                        <b>Contactos</b>
                    </div>
                    <div>
                        <div class="btn-group">
                            <NavLink class="g-1 btn gcom-bg-amarillo" href="../" Match="NavLinkMatch.All">
                                <i class="fa fa-solid fa-arrow-left" /> Volver
                            </NavLink>
                            <NavLink class="btn gcom-bg-rojo" href="crm/listado/actividades" Match="NavLinkMatch.All">
                                Actividades
                            </NavLink>
                        </div>
                    </div>
                </div>
            </Header>
        </Card>
        <div class="col-12 my-2 d-flex justify-content-between gx-1">
            <div class="col-md-2 col">
                <AuthorizeView Roles="Admin, CREAR_CONTACTO">
                    <Authorized Context="CREARCONTACTO">
                        <NavLink class="btn btn-sm gcom-bg-amarillo g-1 col-12" href="crm/contactos/formulario" Match="NavLinkMatch.All">
                            <i class="fa fa-solid fa-plus" />Agregar
                        </NavLink>
                    </Authorized>
                </AuthorizeView>
            </div>
            <div class="col-md-4 d-flex justify-content-end">
                <AuthorizeView Roles="Admin, VER_CONTACTOS">
                    <Authorized Context="VERCONTACTOS">
                        <button class="btn btn-sm gcom-bg-amarillo me-2" type="button" @onclick="OpenModal">
                            <i class="fa fa-solid fa-eye me-1"></i> Ver todos los contactos
                        </button>
                        <button class="btn btn-sm gcom-bg-amarillo" type="button" @onclick="ExportContactos">
                            <i class="fa fa-solid fa-file-excel me-1"></i> Exportar
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>

        </div>
        <AuthorizeView Roles="Admin, VER_CONTACTOS">
            <Authorized Context="VERCONTACTOS">
                <div class="ancho-tabla">
                    <Tabla Datos="contactos" Cargando="loading_info">
                        <Cabeceras>
                            <tr>
                                <AuthorizeView Roles="Admin, EDITAR_CONTACTO, ELIMINAR_CONTACTO, VER_DETALLE_CONTACTOS">
                                    <Authorized Context="ACCIONES">
                                        <th class=" " style="max-width:150px;"></th>
                                    </Authorized>
                                </AuthorizeView>
                                <th>Contacto</th>
                                <th>Nombre de cuenta</th>
                                <th>Tel. movil</th>
                                <th>Tel. Oficina</th>
                                <th>Correo</th>
                                <th>Encargado</th>
                                <th class=" ">División</th>
                                <th class=" ">Estado</th>
                            </tr>
                        </Cabeceras>
                        <Filtros>
                            <tr>
                                <AuthorizeView Roles="Admin, EDITAR_CONTACTO, ELIMINAR_CONTACTO, VER_DETALLE_CONTACTOS">
                                    <Authorized Context="ACCIONES">
                                        <td class=" "></td>
                                    </Authorized>
                                </AuthorizeView>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Nombre" @oninput="FiltrarNombre" />
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Cuenta" @oninput="FiltrarCliente" />
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Tel_Movil" @oninput="FiltrarTel" />
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Tel_Movil" @oninput="FiltrarMovil" />
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Correo" @oninput="FiltrarCorreo" />
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Vendedor" @oninput="FiltrarVendedor" />
                                </td>
                                <td class=" ">
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Division" @oninput="FiltrarDivision" />
                                </td>
                                <td class=" ">
                                    <input class="form-control form-control-sm" @bind-value="filtro_contacto.Estatus" @oninput="FiltrarEstado" />
                                </td>
                            </tr>
                        </Filtros>
                        <Columnas Context="item">
                            <tr>
                                <AuthorizeView Roles="Admin, EDITAR_CONTACTO, ELIMINAR_CONTACTO, VER_DETALLE_CONTACTOS">
                                    <Authorized Context="ACCIONES">
                                        <td class=" ">
                                            <div class="btn-group" role="group">
                                                <AuthorizeView Roles="Admin, EDITAR_CONTACTO">
                                                    <Authorized Context="EDITARCONTACTO">
                                                        <NavLink class="btn gcom-bg-amarillo" href=@($"crm/contactos/formulario/{item.Id}")>
                                                            <i class="fa fa-solid fa-edit" />
                                                        </NavLink>
                                                    </Authorized>
                                                </AuthorizeView>
                                                <AuthorizeView Roles="Admin, VER_DETALLE_CONTACTOS">
                                                    <Authorized Context="VERDETALLECONTACTO">
                                                        <NavLink class="btn gcom-bg-amarillo" href=@($"crm/contacto/{item.Id}")>
                                                            <i class="fa fa-solid fa-eye" />
                                                        </NavLink>
                                                    </Authorized>
                                                </AuthorizeView>
                                                <AuthorizeView Roles="Admin, ELIMINAR_CONTACTO">
                                                    <Authorized Context="ELIMINARCONTACTO">
                                                        <button class="btn btn-danger" @onclick="@(()=>EliminarContacto(item))">
                                                            <i class="fa fa-solid fa-trash" />
                                                        </button>
                                                    </Authorized>
                                                </AuthorizeView>
                                            </div>
                                        </td>
                                    </Authorized>
                                </AuthorizeView>
                                <td>@item.FullName</td>
                                <td>@item.Cuenta</td>
                                <td>@item.Tel_Movil</td>
                                <td>@item.Tel_Oficina</td>
                                <td>@item.Correo</td>
                                <td>@item.Vendedor</td>
                                <td class=" ">@item.Division</td>
                                <td class=" ">@item.Estatus</td>
                            </tr>
                        </Columnas>
                    </Tabla>
                </div>
                <div class="col-12">
                    <PaginacionComponent PaginaActual="filtro_contacto.Pagina_ACtual" PaginasTotales="filtro_contacto.Total_paginas" PaginaSeleccionada="Pagina_Seleccionada" Radio="5" />
                    <div class="col-12">
                        <p>Total de registros: @filtro_contacto.Total_registros</p>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        <NoAutorizado />
    </NotAuthorized>
</AuthorizeView>

<Modal_Custom @ref="_modal" />

@code {
    CRMContactoDTO filtro_contacto = new();
    List<CRMContactoDTO> contactos = new();
    Dictionary<string, string> query = new();

    bool loading_info = false;

    Modal_Custom _modal = null!;

    protected override async Task OnInitializedAsync()
    {
        filtro_contacto.Registros_por_pagina = 15;
        await ObtenerContactos();
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[$"{nameof(filtro_contacto.Nombre)}"] = filtro_contacto.Nombre;
        query[$"{nameof(filtro_contacto.Cuenta)}"] = filtro_contacto.Cuenta;
        query[$"{nameof(filtro_contacto.Tel_Movil)}"] = filtro_contacto.Tel_Movil;
        query[$"{nameof(filtro_contacto.Tel_Oficina)}"] = filtro_contacto.Tel_Oficina;
        query[$"{nameof(filtro_contacto.Correo)}"] = filtro_contacto.Correo;
        query[$"{nameof(filtro_contacto.Vendedor)}"] = filtro_contacto.Vendedor;
        query[$"{nameof(filtro_contacto.Estatus)}"] = filtro_contacto.Estatus;
        query[$"{nameof(filtro_contacto.Division)}"] = filtro_contacto.Division;
        query[$"{nameof(filtro_contacto.Pagina)}"] = filtro_contacto.Pagina.ToString();
        query[$"{nameof(filtro_contacto.Registros_por_pagina)}"] = filtro_contacto.Registros_por_pagina.ToString();
        return query;
    }

    private async Task ObtenerContactos()
    {
        try
        {
            loading_info = true;
            query[nameof(Parametros_Busqueda_Gen.Paginacion)] = true.ToString();
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var response = await http.Get<List<CRMContactoDTO>>($"api/crmcontactos?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                contactos = response.Response;

                filtro_contacto.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtro_contacto.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtro_contacto.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task FiltrarNombre(ChangeEventArgs args)
    {
        filtro_contacto.Nombre = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarCorreo(ChangeEventArgs args)
    {
        filtro_contacto.Correo = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarTel(ChangeEventArgs args)
    {
        filtro_contacto.Tel_Movil = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarMovil(ChangeEventArgs args)
    {
        filtro_contacto.Tel_Oficina = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarVendedor(ChangeEventArgs args)
    {
        filtro_contacto.Vendedor = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarDivision(ChangeEventArgs args)
    {
        filtro_contacto.Division = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarEstado(ChangeEventArgs args)
    {
        filtro_contacto.Estatus = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task FiltrarCliente(ChangeEventArgs args)
    {
        filtro_contacto.Cuenta = args.Value?.ToString() ?? string.Empty;
        await ObtenerContactos();
    }

    private async Task Pagina_Seleccionada(int pagina)
    {
        filtro_contacto.Pagina_ACtual = pagina;
        filtro_contacto.Pagina = pagina;

        await ObtenerContactos();
    }

    private async Task EliminarContacto(CRMContactoDTO crm)
    {
        try
        {
            var confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminacion",
                Text = $"¿Desea eliminar el contacto {crm.FullName}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });
            if (!string.IsNullOrEmpty(confirm.Value))
            {
                var response = await http.Delete($"api/crmcontactos/{crm.Id}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await ObtenerContactos();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private void OpenModal()
    {
        _modal.OpenModal<IndexContactosOtrasDivisionesComponente>("Contactos");
    }

    private async Task ExportContactos()
    {
        try
        {
            query[nameof(filtro_contacto.Excel)] = true.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var responseHttp = await http.Get<byte[]>($"api/crmcontactos?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Js.GuardarComo($"Contactos_{DateTime.Today:g}.xlsx", responseHttp.Response);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
