@page "/crm/documentos"
@inject IRepositorio http
@inject HttpClient httpclient
@inject SweetAlertService swal
@inject IJSRuntime js
@inject NavigationManager navigate
@attribute [Authorize(Roles = "Admin, VER_DOCUMENTOS")]

<AuthorizeView Roles="Admin, VER_DOCUMENTOS">
    <Authorized>
        <Card LoadingContent="loading_info" HeaderClass="d-flex justify-content-between">
            <Header>
                <div>
                    <b>Documentos</b>
                </div>
                <div class="btn-group">
                    <button class="g-1 btn gcom-bg-amarillo" onclick="history.back();">
                        <i class="fa fa-solid fa-arrow-left" /> Volver
                    </button>
                </div>
            </Header>
        </Card>
        <div class="container-fluid overflow-scroll">
            <Tabla Datos="Documentos" Cargando="loading_info">
                <Cabeceras>
                    <tr>
                        <th style="max-width:80px;"></th>
                        <th>Documento</th>
                        <th>Versión</th>
                        <th>Tipo de Documento:</th>
                        <th>Actividad/Oportunidad</th>
                        <th>Vendedor:</th>
                        <th>Cuenta</th>
                        <th>Fecha de creacion</th>
                        <th>Fecha de caducidad</th>
                        <th>Comentarios</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input class="form-control" @bind-value="filtro.NombreDocumento" @oninput="@((args)=>Filtrar(args,nameof(filtro.NombreDocumento)))" />
                            </div>
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
                                <input class="form-control" @bind-value="filtro.Cliente" @oninput="@((args)=>Filtrar(args,nameof(filtro.Cliente)))" />
                            </div>
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>
                            <div class="btn-group">
                                <NavLink class="btn gcom-bg-amarillo" href="@($"crm/documento?{nameof(item.Id)}={item.Id}")">
                                    <i class="fa fa-solid fa-eye" />
                                </NavLink>
                                <button class="btn gcom-bg-amarillo" @onclick="@(()=>DescargarDocumento(item))">
                                    <i class="fa fa-solid fa-download" />
                                </button>
                                <AuthorizeView Roles="Admin, VER_DOCUMENTOS_JURIDICO">
                                    <Authorized Context="Action">
                                        @if (item.ActividadId > 0)
                                        {
                                            <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/actividades/{item.ActividadId}")>
                                                <i class="fa-solid fa-arrow-up-from-bracket"></i>
                                            </NavLink>
                                        }
                                        else if (item.OportunidadId > 0)
                                        {
                                            <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/oportunidades/{item.OportunidadId}")>
                                                <i class="fa-solid fa-arrow-up-from-bracket"></i>
                                            </NavLink>
                                        }
                                        else
                                        {
                                        }
                                    </Authorized>
                                </AuthorizeView>
                                @*<AuthorizeView Roles="Admin, VER_DOCUMENTOS_JURIDICO">
                                    <Authorized Context="Action">
                                        @if (item.ActividadId > 0)
                                        {
                                            <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/actividades/{item.ActividadId}")>
                                                <i class="fa-solid fa-comment"></i>
                                            </NavLink>
                                        }
                                        else if (item.OportunidadId > 0)
                                        {
                                            <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/oportunidades/{item.OportunidadId}")>
                                                <i class="fa-solid fa-comment"></i>
                                            </NavLink>
                                        }
                                        else
                                        {
                                        }
                                    </Authorized>
                                </AuthorizeView>*@

                            </div>
                        </td>
                        <td>@item.NombreDocumento</td>
                        <td>@item.Version</td>
                        <td>
                            @if (item.TipoDocumento != null && item.TipoDocumento.Any())
                            {
                                foreach (var tipo in item.TipoDocumento)
                                {
                                    <span class="badge rounded-pill gcom-bg-amarillo me-1" style="font-size: 0.7rem; padding: 7px 12px;">@tipo</span>
                                }
                            }
                        </td>
                        <td>@item.Oportunidad@item.Actividad</td>
                        <td>
                            @(string.IsNullOrWhiteSpace(item.VendedorActividad) && string.IsNullOrWhiteSpace(item.VendedorOportunidad)
        ? "JURIDICO"
        : $"{item.VendedorActividad}{item.VendedorOportunidad}")
                        </td>
                        <td>@item.ClienteOportunidad@item.ClienteActividad</td>
                        <td>@item.FechaCreacion.ToShortDateString()</td>
                        <td>@item.FechaCaducidad.ToShortDateString()</td>
                        <td>@item.Comentarios</td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
        <div class="col-12">
            <PaginacionComponent PaginaActual="filtro.Pagina_ACtual" PaginasTotales="filtro.Total_paginas" PaginaSeleccionada="Pagina_Seleccionada" Radio="5" />
            <div class="col-12">
                <p>Total de registros: @filtro.Total_registros</p>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NoAutorizado />
    </NotAuthorized>
</AuthorizeView>
@code {

    CRMDocumentoClienteDTO filtro = new();
    List<CRMDocumentoClienteDTO> Documentos = new();

    Dictionary<string, string> query = new();

    private bool loading_info = false;

    protected override async Task OnParametersSetAsync()
    {
        query = navigate.ObtenerQueryString(navigate.Uri);

        if (query.ContainsKey(nameof(filtro.OportunidadId)))
            filtro.OportunidadId = int.Parse(query[nameof(filtro.OportunidadId)]);
        if (query.ContainsKey(nameof(filtro.ActividadId)))
            filtro.ActividadId = int.Parse(query[nameof(filtro.ActividadId)]);

        await ObtenerDocumentos();
    }

    private async Task ObtenerDocumentos()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetParameter());

            var response = await http.Get<List<CRMDocumentoClienteDTO>>($"api/crmfile?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Documentos = response.Response;

                filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task Pagina_Seleccionada(int pagina)
    {
        filtro.Pagina_ACtual = pagina;
        filtro.Pagina = pagina;

        await ObtenerDocumentos();
    }

    private Dictionary<string, string> SetParameter()
    {
        query[$"{nameof(filtro.NombreDocumento)}"] = filtro.NombreDocumento;
        query[$"{nameof(filtro.Cliente)}"] = filtro.Cliente;
        query[$"{nameof(filtro.OportunidadId)}"] = filtro.OportunidadId.ToString();
        query[$"{nameof(filtro.ActividadId)}"] = filtro.ActividadId.ToString();
        query[$"{nameof(filtro.Pagina)}"] = filtro.Pagina.ToString();
        query[$"{nameof(filtro.Registros_por_pagina)}"] = filtro.Registros_por_pagina.ToString();
        return query;
    }

    private async Task Filtrar(ChangeEventArgs args, string campo)
    {
        switch (campo)
        {
            case nameof(filtro.NombreDocumento):
                filtro.NombreDocumento = args.Value?.ToString() ?? string.Empty;
                break;
            case nameof(filtro.Cliente):
                filtro.Cliente = args.Value?.ToString() ?? string.Empty;
                break;
            default:
                break;
        }
        await ObtenerDocumentos();
    }

    private async Task DescargarDocumento(CRMDocumentoClienteDTO crm)
    {
        var response = await http.Get<CRMDocumentoDTO>($"api/crmfile/download/{crm.Id}");
        if (response.Error)
        {

            var message = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            await js.GuardarComo(response.Response.NombreDocumento, response.Response.InfoBytes);
        }
    }
}
