@page "/terminales"
@inject IRepositorio http
@inject SweetAlertService swal
@inject NotificationService ns
@inject TerminalValidator validator
@attribute [Authorize]

<Card HeaderText="Configuracion de unidades de negocio" LoadingContent="loading" />
<Card HeaderText="Agregar unidad de negocio">
    <Body>
        <EditForm Model="Terminal" OnValidSubmit="Guardar_Terminal">

            <FluentValidationValidator Validator="validator" />
            <ValidationSummary />

            <div class="col-12 row g-1">
                <div class="col-3">
                    <InputText @bind-Value="Terminal.Den" class="form-control form-control-sm" placeholder="Nombre de la unidad de negocio" />
                    <ValidationMessage For="@(()=>Terminal.Den)" />
                </div>
                <div class="col-3">
                    <InputText @bind-Value="Terminal.Codigo" class="form-control form-control-sm" placeholder="Abreviacion de la unidad de negocio" />
                    <ValidationMessage For="@(()=>Terminal.Codigo)" />
                </div>
                <div class="col-3">
                    <InputText @bind-Value="Terminal.CodigoOrdenes" class="form-control form-control-sm" placeholder="Identificador de orden" />
                    <ValidationMessage For="@(()=>Terminal.CodigoOrdenes)" />
                </div>
                <div class="col-3">
                    <InputSelect @bind-Value="Terminal.TipoTerminalId" class="form-select form-select-sm">
                        <option>-- Tipos de terminal --</option>
                        @foreach (var item in TiposTermial)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=>Terminal.TipoTerminalId)" />
                </div>
            </div>
            <div class="col-12 row g-1 mt-1">
                <div class="col-3">
                    <button class="col-12 btn btn-sm gcom-bg-amarillo" type="submit">
                        Guardar
                    </button>
                </div>
                <div class="col-3">
                    <button class="col-12 btn btn-sm gcom-bg-amarillo" type="button" @onclick="@(()=>Terminal = new())">
                        Cancelar
                    </button>
                </div>
            </div>
        </EditForm>
    </Body>
</Card>
<div class="ancho-tabla my-2">
    <Tabla Datos="Terminales">
        <Cabeceras>
            <tr>
                <th>Unidad de negocio</th>
                <th>Tipo de terminal</th>
                <th>Abreviacion</th>
                <th>Identificador de orden</th>
                <th>Editar</th>
                <th>Activar / Desactivar</th>
                <th>Catalogo</th>
                <th>Configuracion</th>
            </tr>
        </Cabeceras>
        <Columnas Context="terminal">
            <tr>
                <td>@terminal.Den</td>
                <td>@terminal.TipoTerminal</td>
                <td>@terminal.Codigo</td>
                <td>@terminal.CodigoOrdenes</td>
                <td>
                    <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>Fijar_Terminal(terminal))">
                        <i class="fa fa-sild fa-edit"></i>
                    </button>
                </td>
                <td>
                    <div class="form-check form-switch mx-2">
                        <input type="checkbox" class="form-check-input" role="switch" checked="@terminal.Activo" @onchange="@(()=>Cambiar_Status_Terminal(terminal))" />
                    </div>
                </td>
                <td>
                    <div>
                        @if (loading_catalogo)
                        {
                            <button class="btn btn-sm gcom-bg-amarillo" disabled>
                                Copiar catalogo
                                <SpinnerLoading />
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>Abrir_Modulo_Copiado(terminal))">
                                Copiar catalogo
                            </button>
                        }
                    </div>
                </td>
                <td>
                    <div>
                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>Abrir_Modal_Configuracion(terminal))"><i class="fa fa-solid fa-gear"></i></button>
                    </div>
                </td>
            </tr>
        </Columnas>
    </Tabla>
</div>

<Modal_Custom @ref="modal_">
    <Titulo_Personalizado>
        <b>Configuracion de terminal: @Terminal.Den</b>
    </Titulo_Personalizado>
</Modal_Custom>

@code {
    TerminalPostDTO Terminal = new();

    List<TerminalDTO> Terminales = new();
    List<Catalogo_Fijo> TiposTermial = new();

    Modal_Custom modal_ = null!;

    bool loading_catalogo = false;
    bool loading_guardar = false;

    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
        ObtenerCatalogo(),
        Obtener_Terminal());
    }

    private async Task Obtener_Terminal()
    {
        try
        {
            loading = true;
            var response = await http.Get<List<TerminalDTO>>("api/terminal/all");
            if (response.Error)
            {
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                loading = false;
            }
            else
            {
                Terminales = response.Response;
                loading = false;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            loading = false;
        }
    }

    private async Task ObtenerCatalogo()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>("api/terminal/catalogo/tipoterminal");
            if (response.Error)
            {
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                TiposTermial = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Guardar_Terminal()
    {
        try
        {
            var response = await http.Post<TerminalPostDTO, TerminalDTO>("api/terminal", Terminal);
            if (response.Error)
            {
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                Terminal = new();
                await Obtener_Terminal();
                if (response.Response is not null)
                {
                    var confirm = await swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = SweetAlertIcon.Warning,
                            ShowCancelButton = true,
                            ConfirmButtonText = "Aceptar",
                            CancelButtonText = "Cancelar",
                            Text = "¿Desea copiar el catalogo (clientes, destinos, choferes, etc.) de alguna terminal existente a la nueva terminal?"
                        });

                    if (!string.IsNullOrEmpty(confirm.Value))
                        Abrir_Modulo_Copiado(response.Response);
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Fijar_Terminal(TerminalDTO terminal)
    {
        var response = await http.Get<TerminalPostDTO>($"api/terminal/{terminal.Cod}");
        if (response.Error)
        {
            await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
        }
        else
        {
            Terminal = response.Response;
        }
    }

    private async Task Cambiar_Status_Terminal(TerminalDTO terminal)
    {
        try
        {
            var response = await http.Delete($"api/terminal/{terminal.Cod}");
            if (response.Error)
            {
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                await Obtener_Terminal();
            }
            else
            {
                Terminal = new();
                await Obtener_Terminal();
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Abrir_Modulo_Copiado(TerminalDTO tad)
    {
        modal_.OpenModal<Vista_Seleccion_Catalogo_Componente>("Seleccion de catalogo", new() { { "Terminal_Destino", tad.Cod } });
    }

    private void CloseModal()
    {
        Terminal = new();
        modal_.Close();
    }

    private void Abrir_Modal_Configuracion(TerminalDTO terminal)
    {
        modal_.OpenModal<Vista_Configuracion_Terminal_Componente>("Configuracion de terminal", new() {
            { "Id_Terminal", terminal.Cod },
            {nameof(Vista_Configuracion_Terminal_Componente.CloseModal), EventCallback.Factory.Create(this, CloseModal)}
        });
    }
}
