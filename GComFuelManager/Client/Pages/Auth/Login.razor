@page "/login"

@layout FullPageComponent
@inject NavigationManager navigation
@inject SweetAlertService swal
@inject IRepositorio http
@inject ILoginService login

<div class="col-12 card shadow">


    <section class="vh-100" style="background-color: #ffffff;">
        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col col-xl-10">
                    <div class="card shadow-lg" style="border-radius: 1rem; ">
                        <div class="row g-0">
                            <div class="col-md-6 d-flex justify-content-center align-items-center gcom-bg-rojo" style="border-radius:4px;">
                                <div class="col-6">
                                    <img src="img/LOGO GCOM.png"
                                         alt="LOGO GCOM" class=" img-fluid" />
                                </div>
                            </div>
                            <div class="col-md-6 d-flex align-items-center justify-content-center">
                                <div class="card-body p-4 p-lg-5 text-black">

                                    <EditForm Model="usuario">
                                        <DataAnnotationsValidator />
                                        <div class="form-outline mb-4">
                                            <label class="form-label" for="form2Example17">Usuario:</label>
                                            <InputText class="form-control" placeholder="Usuario" @bind-Value="usuario.Username" />
                                            <ValidationMessage For="@(()=>usuario.Username)" />
                                        </div>

                                        <div class="form-outline mb-4">
                                            <label class="form-label" for="form2Example27">Contraseña:</label>
                                            <InputText type="password" class="form-control" placeholder="Contraseña" @bind-Value="usuario.Password" />
                                            <ValidationMessage For="@(()=>usuario.Password)" />
                                        </div>
                                        <div class="col-12 mt-4 d-flex justify-content-center">
                                            <button class="btn gcom-bg-amarillo col-12" type="submit" @onclick="@LoguearUsuario">
                                                Ingresar
                                                @if (loading)
                                                {
                                                    <SpinnerLoading></SpinnerLoading>
                                                }
                                            </button>
                                        </div>

                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

</div>


@code {
    private UserLogin usuario { get; set; } = new UserLogin();
    private bool loading = false;
    private bool loading_terminales = false;
    [CascadingParameter] public ErrorHandleComponent? Error { get; set; }

    List<string> Terminales { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            loading_terminales = true;
            var response = await http.Get<List<string>>("api/terminal/login");
            if (response.Error)
            {
                loading_terminales = false;
                string? message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_terminales = false;
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            loading_terminales = false;
            Error?.ProcessError(e);
        }
    }

    private async Task LoguearUsuario()
    {
        try
        {
            loading = true;
            var response = await http.Post<UserLogin, UserTokenDTO>("api/auth/login", usuario);
            if (response.Error)
            {
                loading = false;
                string? message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                await login.Login(response.Response);
                navigation.NavigateTo("");
            }
        }
        catch (Exception e)
        {
            loading = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}

