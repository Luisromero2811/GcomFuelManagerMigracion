@inject ILoginService login
@inject SweetAlertService swal
@inject NavigationManager navigate
@inject IJSRuntime js

<AuthorizeView Context="MenuGeneral">
    <Authorized>
        <div class="col-12 gcom-bg-rojo text-white d-flex justify-content-between">
            <button class="btn gcom-bg-rojo text-white" @onclick="OpenMenuLateral" id="buttonSidepanel">
                <i class="fa fa-solid fa-bars"></i>
            </button>
            <div class="d-flex px-4 align-items-center gcom-bg-rojo-dark">
                <div class="d-flex justify-content-between">
                    @if (MenuGeneral.User.Identity is not null)
                    {
                        <small class="my-auto">@MenuGeneral.User.Identity.Name</small>
                    }
                    <button class="btn btn-sm text-white" style="white-space:nowrap" @onclick="@CerrarSesion">Cerrar sesión</button>
                </div>
            </div>
        </div>

    </Authorized>
</AuthorizeView>

@code {

    private async void OpenMenuLateral()
    {
        await js.InvokeVoidAsync("OpenMenu");
    }

    private async void CerrarSesion()
    {
        try
        {
            await login.Logoute();
            navigate.NavigateTo("/login");
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}