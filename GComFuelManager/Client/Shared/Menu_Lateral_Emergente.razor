@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal

<div id="mySidepanel" class="sidepanel gcom-bg-naranja">
    <a href="javascript:void(0)" class="closebtn" @onclick="CloseMenuLateral">×</a>
    @foreach (var level_0 in Menus)
    {
        <AuthorizeView Roles="@level_0.roles" Context="level_0_context">
            <Authorized>
                @if (!level_0.isMenu)
                {
                    <NavLink href="@level_0.path" Match="NavLinkMatch.All" ActiveClass="sidepanel-item-active">
                        <div class="sidepanel-item">
                            @if (!string.IsNullOrEmpty(level_0.icon))
                            {
                                <i class="fa fa-solid fa-@level_0.icon" aria-hidden="true"></i>
                            }
                            @level_0.name
                        </div>
                    </NavLink>
                }
                else
                {
                    <DropDownMenu Show="@level_0.showDropDown">
                        <Button>
                            <DropDownMenuButton @bind-ShowDropDown="@level_0.showDropDown">
                                <ButtonTemplate>
                                    @if (!string.IsNullOrEmpty(level_0.icon))
                                    {
                                        <i class="fa fa-solid fa-@level_0.icon" aria-hidden="true"></i>
                                    }
                                    @level_0.name
                                </ButtonTemplate>
                            </DropDownMenuButton>
                        </Button>
                        <Items>
                            @foreach (var level_1 in level_0.Menus)
                            {

                                @if (!level_1.isMenu)
                                {
                                    <DropDownMenuItem Path="@level_1.path" Use_Roles="@true" Roles="@level_1.roles">
                                        <ItemTemplate>
                                            @if (!string.IsNullOrEmpty(level_1.icon))
                                            {
                                                <i class="fa fa-solid fa-@level_1.icon" aria-hidden="true"></i>
                                            }
                                            @level_1.name
                                        </ItemTemplate>
                                    </DropDownMenuItem>
                                }
                                else
                                {
                                    <DropDownMenu Show="@level_1.showDropDown">
                                        <Button>
                                            <DropDownMenuButton @bind-ShowDropDown="level_1.showDropDown">
                                                <ButtonTemplate>
                                                    @if (!string.IsNullOrEmpty(level_1.icon))
                                                    {
                                                        <i class="fa fa-solid fa-@level_1.icon" aria-hidden="true"></i>
                                                    }
                                                    @level_1.name
                                                </ButtonTemplate>
                                            </DropDownMenuButton>
                                        </Button>
                                        <Items>
                                            @foreach (var level_2 in level_1.Menus)
                                            {
                                                <DropDownMenuItem Path="@level_2.path" Use_Roles="@true" Roles="@level_2.roles">
                                                    <ItemTemplate>
                                                        @if (!string.IsNullOrEmpty(level_2.icon))
                                                        {
                                                            <i class="fa fa-solid fa-@level_2.icon" aria-hidden="true"></i>
                                                            @level_2.name
                                                        }
                                                    </ItemTemplate>
                                                </DropDownMenuItem>

                                            }
                                        </Items>
                                    </DropDownMenu>
                                }

                            }
                        </Items>
                    </DropDownMenu>
                }
            </Authorized>
        </AuthorizeView>
    }
</div>


@code {
    List<Menu> Menus { get; set; } = new();

    protected override void OnInitialized()
    {

        Menus.AddRange(new List<Menu>(){
            new()
                {
                    name = "Roles",
                    path = "crm/roles",
                    roles = "Admin, VER_MODULO_ROLES"
                },
            new()
                {
                    name = "Vendedores",
                    path = "crm/vendedores",
                    roles = "Admin, VER_MODULO_VENDEDORES"
                },
            new()
                {
                    name = "Comerciales",
                    path = "crm/originadores",
                    roles = "Admin, VER_MODULO_ORIGINADORES"
                },
            new()
                {
                    name = "Usuarios",
                    path = "crm/usuarios",
                    roles = "Admin, VER_MODULO_USUARIOS"
                },
            new()
                {
                    name = "Equipos",
                    path = "crm/equipos",
                    roles = "Admin, VER_MODULO_EQUIPOS"
                },
            new()
                {
                    name = "Contactos",
                    path = "crm/contactos",
                    roles = "Admin, VER_MODULO_CONTACTOS"
                },
            new()
                {
                    name = "Actividades",
                    path = "crm/listado/actividades",
                    roles = "Admin, VER_MODULO_ACTIVIDADES"
                },
            new()
                {
                    name = "Historial actividades",
                    path = "crm/historial/actividades",
                    roles = "Admin, VER_MODULO_HISTORIAL_ACTIVIDADES"
                },
            new()
                {
                    name = "Oportunidades",
                    path = "crm/oportunidades",
                    roles = "Admin, VER_MODULO_OPORTUNIDADES"
                },
            new()
                {
                    name = "Catalogos",
                    path = "crm/catalogos",
                    roles = "Admin, VER_MODULO_CATALOGOS"
                },
            new()
            {
                name = "Documentos",
                path = "crm/documentos",
                roles = "Admin"
            },
                });
    }

    private async void CloseMenuLateral()
    {
        await js.InvokeVoidAsync("CloseMenu");
    }

    public class Menu
    {
        public string name { get; set; } = string.Empty;
        public string path { get; set; } = string.Empty;
        public string icon { get; set; } = string.Empty;
        public string roles { get; set; } = string.Empty;
        public string context_item { get; set; } = string.Empty;
        public bool isMenu { get; set; } = false;
        public bool showDropDown { get; set; } = false;
        public List<Menu> Menus { get; set; } = new();

        public void ToggleShow()
        {
            showDropDown = !showDropDown;
        }
    }
}
