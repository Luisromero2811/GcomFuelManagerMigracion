@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal

<div id="mySidepanel" class="sidepanel">
    <a href="javascript:void(0)" class="closebtn" @onclick="CloseMenuLateral">×</a>
    @foreach (var level_0 in Menus)
    {
        @if (level_0.isVisible)
        {
            <AuthorizeView Roles="@level_0.roles" Context="level_0_context">
                <Authorized>
                    @if (!level_0.isMenu)
                    {
                        <NavLink href="@level_0.path" Match="NavLinkMatch.Prefix" ActiveClass="sidepanel-item-active">
                            <div class="sidepanel-item">
                                <i class="fa fa-solid fa-@level_0.icon" aria-hidden="true"></i>
                                @level_0.name
                            </div>
                        </NavLink>
                    }
                    else
                    {
                        <DropDownMenu Show="@level_0.showDropDown">
                            <Button>
                                <DropDownMenuButton @bind-ShowDropDown="@level_0.showDropDown">
                                    <ButtonTemplate>
                                        <i class="fa fa-solid fa-@level_0.icon" aria-hidden="true"></i>
                                        @level_0.name
                                    </ButtonTemplate>
                                </DropDownMenuButton>
                            </Button>
                            <Items>
                                @foreach (var level_1 in level_0.Menus)
                                {
                                    @if (level_1.isVisible)
                                    {
                                        @if (!level_1.isMenu)
                                        {
                                            <DropDownMenuItem Path="@level_1.path" Use_Roles="@true" Roles="@level_1.roles">
                                                <ItemTemplate>
                                                    <i class="fa fa-solid fa-@level_1.icon" aria-hidden="true"></i>
                                                    @level_1.name
                                                </ItemTemplate>
                                            </DropDownMenuItem>
                                        }
                                        else
                                        {
                                            <DropDownMenu Show="@level_1.showDropDown">
                                                <Button>
                                                    <DropDownMenuButton @bind-ShowDropDown="level_1.showDropDown">
                                                        <ButtonTemplate>
                                                            <i class="fa fa-solid fa-@level_1.icon" aria-hidden="true"></i>
                                                            @level_1.name
                                                        </ButtonTemplate>
                                                    </DropDownMenuButton>
                                                </Button>
                                                <Items>
                                                    @foreach (var level_2 in level_1.Menus)
                                                    {
                                                        @if (level_2.isVisible)
                                                        {
                                                            <DropDownMenuItem Path="@level_2.path" Use_Roles="@true" Roles="@level_2.roles">
                                                                <ItemTemplate>
                                                                    <i class="fa fa-solid fa-@level_2.icon" aria-hidden="true"></i>
                                                                    @level_2.name
                                                                </ItemTemplate>
                                                            </DropDownMenuItem>
                                                        }
                                                    }
                                                </Items>
                                            </DropDownMenu>
                                        }
                                    }
                                }
                            </Items>
                        </DropDownMenu>
                    }
                </Authorized>
            </AuthorizeView>
        }
    }
</div>


@code {
    List<Menu> Menus { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Checar_Terminal();
        //usuarios
        Menus.Add(new Menu() { name = "Usuarios", icon = "user", path = "/usuarios", roles = "Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia" });
        //configuracion
        Menus.Add(new Menu()
            {
                isMenu = true,
                name = "Configuración",
                icon = "gear",
                roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Gestion de Transporte, Correo de Clientes, Analista Credito, Contador, Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo, Precios",
                Menus = new()
                {
                    new()
                    {
                        isMenu = true,
                        name = "Datos",
                        icon = "server",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador",
                        Menus = new()
                        {
                            new()
                            {
                                name = "Tonel",
                                icon = "truck-moving",
                                roles = "Admin, Administrador Sistema, Direccion, Gerencia, Gestion de Transporte",
                                path = "datos/tonel"
                            },
                            new()
                            {
                                name = "Chofer",
                                icon = "id-card",
                                roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Gestion de Transporte",
                                path = "datos/Catalogo/Chofer"
                            },
                            new()
                            {
                                name = "Destino",
                                icon = "location-dot",
                                roles = "Admin, Administrador Sistema, Direccion, Gerencia",
                                path = "datos/codigos/destino"
                            }
                        }
                    },

                    new()
                    {
                        isMenu = true,
                        name = "Actualización de Registros",
                        icon = "rotate",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Contador, Analista Credito, Programador, Ejecutivo de Cuenta Operativo, Gestion de Transporte, Correo de Clientes, Ejecutivo de Cuenta Comercial",
                        Menus = new()
                        {
                            new()
                            {
                                name = "Actualizar datos",
                                icon = "store-slash",
                                roles = "Admin, Administrador Sistema, Gestion de Transporte, Programador",
                                path = "actualizacion",
                                isVisible = Esta_En_Tuxpan
                            },
                            new()
                            {
                                name = "Relacionar datos",
                                icon = "user-tie",
                                roles = "Admin, Administrador Sistema, Direccion, Programador, Gerencia, Analista Credito, Contador, Correo de Clientes, Ejecutivo de Cuenta Comercial",
                                path = "asignar-cliente-destino"
                            },

                            new()
                           {
                                path = "terminales",
                                name = "Creación de Unidades de Negocio",
                                icon = "gas-pump",
                                roles = "Admin, Administrador Sistema, Analista Credito, Programador, Ejecutivo de Cuenta Comercial",
                            },

                            new()
                            {
                                name = "Asociación de Catálogos UN",
                                icon = "user-tie",
                                roles = "Admin, Administrador Sistema, Gestion de Transporte, Analista Credito, Programador, Ejecutivo de Cuenta Operativo, Ejecutivo de Cuenta Comercial, Analista Suministros",
                                path = "catalogoterminales",
                                isVisible = !Esta_En_Tuxpan
                            }
                        }
                    },
                    new()
                    {
                        path = "catalogos",
                        name = "Catalogos",
                        icon = "book",
                        roles = "Admin, Administrador Sistema, Catalogos",
                    },
                    new()
                    {
                        path = "configuracion-email",
                        name = "Correo Interno",
                        icon = "envelope",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial",
                    },
                    new()
                    {
                        path = "configuracion/moneda",
                        name = "Moneda",
                        icon = "coins",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Precios, Analista Credito",
                    },
                    new()
                    {
                        path = "configuracion/generacion/folios",
                        name = "Generación de Folios",
                        icon = "marker",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial",
                    },
                    new()
                    {
                        path = "configuracion/vendedores",
                        name = "Configurar vendedores",
                        icon = "id-card",
                        roles = "Admin, Administrador Sistema",
                    },
                    new()
                    {
                        path = "configuracion/originador",
                        name = "Configurar originadores",
                        icon = "id-card",
                        roles = "Admin, Administrador Sistema",
                    },

                     new()
                     {
                         path = "obtencion/catalogos",
                         name = "Descarga de Catálogos",
                         icon = "file-excel",
                         roles = "Admin, Administrador Sistema, Programador, Analista Credito, Precios, Ejecutivo de Cuenta Comercial, Gestion de Transportes",
                     },
                      new()
                      {
                          path = "autorizadores",
                          name = "Gestión de Autorizadores",
                          icon = "person-circle-check",
                          roles = "Admin, Administrador Sistema, Programador",
                      },
                }
            });
        //precios
        Menus.Add(new Menu()
            {
                name = "Precios",
                icon = "money-bill-1-wave",
                roles = "Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Revision Precios",
                isMenu = true,
                Menus = new()
{
                    new()
                    {
                        name = "Precios", icon = "money-bill-1-wave", path = "precios",
                        roles = "Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Revision Precios"
                    },
                    new()
                    {
                        name = "Historial de Precios", icon = "file-invoice-dollar", path = "historial/precios",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Precios, Analista Credito, Contador, Revision Precios"
                    }
                }
            });
        //cierres
        Menus.Add(new Menu()
            {
                isVisible = Esta_En_Tuxpan,
                isMenu = true,
                name = "Cierres",
                icon = "store-slash",
                roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Comprador, Lectura de Cierre de Orden, Cierre Pedidos, Revision Precios",
                Menus = new()
{
                    new()
                    {
                        name = "Cierre de pedidos",
                        icon = "store-slash",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Comprador, Lectura de Cierre de Orden, Revision Precios",
                        path = "cierre/pedido"
                    },
                    new()
                    {
                        name = "Cierre por grupo",
                        icon = "store-slash",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Comprador, Lectura de Cierre de Orden, Revision Precios",
                        path = "cierre-grupo"
                    },
                    new()
                    {
                        name = "Confirmación de Cierres de Clientes",
                        icon = "clipboard-check",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial",
                        path = "confirm-cierre"
                    },
                    new()
                    {
                        name = "Cerrar pedidos",
                        icon = "folder-closed",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Cierre Pedidos",
                        path = "cerrar"
                    },
                    new()
                    {
                        name = "Estado de Pedido",
                        icon = "truck-ramp-box",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Ejecutivo de Cuenta Comercial, Revision Precios",
                        path = "orden"
                    },
                    new()
                    {
                        name = "Reporte cierres",
                        icon = "file-excel",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Revision Precios",
                        path = "reporte/cierres"
                    },
                    new()
                    {
                        name = "Reporte de Volumen de Cierres",
                        icon = "file-excel",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial",
                        path = "reporte/cierres/volumen"
                    }
                }

            });
        //ordenes
        Menus.Add(new Menu()
            {
                isMenu = true,
                name = "Órdenes",
                icon = "rectangle-list",
                roles = "Admin, Administrador Sistema, Direccion, Lectura Asignacion, Gerencia, Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo , Programador, Revision Precios , Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Analista Credito, Contador, Auditor , Comprador, Revision Precios",
                Menus = new()
{
                    new()
                    {
                        name = "Órdenes sin pedido",
                        icon = "rectangle-list",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador",
                        path = "ordenes"
                    },
                    new()
                    {
                        name = "Órdenes de Pedido",
                        icon = "rectangle-list",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador",
                        path = "ordenes/pedido"
                    },
                    new()
                    {
                        name = "Confirmar órdenes copiadas",
                        icon = "rectangle-list",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador",
                        path = "ordenes/copiadas"
                    },
                    new()
                    {
                        name = "Confirmar órdenes de Clientes",
                        icon = "rectangle-list",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial",
                        path = "confirm-ordenes"
                    },
                    new()
                    {
                        name = "Programación Equipos",
                        icon = "truck-droplet",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Lectura Asignacion",
                        path = "asignacion/unidades"
                    },
                    new()
                    {
                        name = "Seguimiento de Órdenes",
                        icon = "clipboard-list",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Credito, Contador, Auditor, Ejecutivo de Cuenta Operativo",
                        path = "seguimiento/ordenes"
                    },
                    new()
                    {
                        name = "Consulta de Orden",
                        icon = "magnifying-glass",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Ejecutivo de Cuenta Operativo",
                        path = "consulta/Orden"
                    },
                    new()
                    {
                        name = "Reporte de Órdenes / Precios de Venta",
                        icon = "list-check",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Revision Precios",
                        // path = "consulta/ordencliente"
                        path = "ordenes/facturacion"
                    },
                // new()
                // {
                //     name = "Reporte de ordenes facturadas",
                //     icon = "list-check",
                //     roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Revision Precios",
                //     path = "ordenes/facturacion"
                // },
                //new()
                //{
                //    name = "ETA",
                //    icon = "hourglass-half",
                //    roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador",
                //    path = "eta"
                //},
                //    new()
                //{
                //    name = "Gestión de Estados",
                //    icon = "bars-progress",
                //    roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador",
                //    path = "gestionEstados"
                //},
                    new()
                    {
                        name = "Gestión de Orden(es) Cargada(s)",
                        icon = "bars-progress",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Suministros, Analista Credito, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador",
                        path = "gestionordenes"
                    },
                    new()
                    {
                        name = "Historial de Órdenes",
                        icon = "file-invoice-dollar",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador",
                        path = "historial/asignacion"
                    },
                    new()
                    {
                        name = "Actualizar Órdenes",
                        icon = "repeat",
                        roles = "Admin, Administrador Sistema, Programador, Ejecutivo de Cuenta Operativo, Coordinador",
                        path = "modificacion/orden"
                    },
                    new()
                    {
                        name = "Subir órdenes",
                        icon = "file-arrow-up",
                        roles = "Admin, Administrador Sistema, Programador, Ejecutivo de Cuenta Operativo",
                        path = "subir/ordenes"
                    },
                }
            });
        //pedimentos
        Menus.Add(new Menu()
            {
                name = "Pedimentos",
                icon = "file-circle-check",
                roles = "Admin, Administrador Sistema, Direccion, Gerencia, Contraloria",
                isMenu = true,
                Menus = new()
{
                    new()
                    {
                        name = "Costos",
                        icon = "file-circle-check",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Contraloria",
                        path = "pedimento"
                    },
                    new()
                    {
                        name = "Listado de Pedimentos",
                        icon = "file-circle-check",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Contraloria",
                        path = "listado/pedimentos"
                    },
                }
            });
        //redirecciones
        Menus.Add(new Menu()
            {
                name = "Redireccionamientos",
                icon = "diamond-turn-right",
                roles = "Admin, Administrador Sistema, Programador, Analista Credito",
                isMenu = true,
                Menus = new()
{
                    new()
                    {
                        name = "Redireccionar órdenes",
                        icon = "diamond-turn-right",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador",
                        path = "redireccionamiento"
                    },
                    new()
                    {
                        name = "Listado redirección",
                        icon = "diamond-turn-right",
                        roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador, Analista Credito",
                        path = "listado/redireccion"
                    },
                }
            });
        //ventas
        Menus.Add(new Menu()
            {
                name = "Ventas",
                icon = "file-circle-check",
                roles = "Admin, Administrador Sistema, Reportes De Venta",
                isMenu = true,
                Menus = new()
{
                    new()
                    {
                        name = "Desempeño de Ventas",
                        icon = "list-check",
                        roles = "Admin, Administrador Sistema, Reportes De Venta",
                        path = "reporte/ventas"
                    },
                    new()
                    {
                        name = "Establecimiento de Metas",
                        icon = "list-check",
                        roles = "Admin, Administrador Sistema, Reportes De Venta",
                        path = "establecer/meta"
                    },
                }
            });
        //tarifario
        //Menus.Add(new Menu()
        //{
        //    name = "Tarifario",
        //    icon = "file-invoice-dollar",
        //    roles = "Admin, Administrador Sistema, Tarifas",
        //    isMenu = true,
        //    Menus = new()
        //{
        //            new()
        //            {
        //                name = "Tarifas",
        //                icon = "file-invoice",
        //                roles = "Admin, Administrador Sistema",
        //                path = "tarifario"
        //            },
        //            new()
        //            {
        //                name = "Historial de Tarifas",
        //                icon = "file-invoice-dollar",
        //                roles = "Admin, Administrador Sistema",
        //                path = "tarifa/historial"
        //            },
        //        }
        //});
        //activos fijos
        Menus.Add(new Menu()
            {
                isVisible = Esta_En_Tuxpan,
                name = "Activos fijos",
                icon = "chart-line",
                roles = "Admin, Administrador Sistema, Activos Fijos",
                isMenu = false,
                path = "activos"
            });
        //inventarios
        Menus.Add(new Menu()
            {
                name = "Inventario",
                icon = "warehouse",
                roles = "Admin, Administrador Sistema, Inventarios, Inventarios Lectura",
                isMenu = true,
                Menus = new()
                {
                    new()
                    {
                        name = "Registro de inventario",
                        icon = "warehouse",
                        roles = "Admin, Administrador Sistema, Inventarios, Inventarios Lectura",
                        path = "inventarios",
                    },
                    new()
                    {
                        name = "Resumen de inventario",
                        icon = "warehouse",
                        roles = "Admin, Administrador Sistema, Inventarios, Inventarios Lectura",
                        path = "inventarios/resumen",
                    },
                    new()
                    {
                        name = "Inventarios cerrados",
                        icon = "warehouse",
                        roles = "Admin, Administrador Sistema, Inventarios, Inventarios Lectura",
                        path = "inventarios/cierres",
                    }
                }
            });
    }

    bool Esta_En_Tuxpan = true;
    private async Task Checar_Terminal()
    {
        try
        {
            var response = await repositorio.Get<Tad>($"api/terminal/check");

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Esta_En_Tuxpan = response.Response.Cod == 1;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void CloseMenuLateral()
    {
        await js.InvokeVoidAsync("CloseMenu");
    }

    public class Menu
    {
        public string name { get; set; } = string.Empty;
        public string path { get; set; } = string.Empty;
        public string icon { get; set; } = string.Empty;
        public string roles { get; set; } = string.Empty;
        public string context_item { get; set; } = string.Empty;
        public bool isMenu { get; set; } = false;
        public bool showDropDown { get; set; } = false;
        public List<Menu> Menus { get; set; } = new();
        public bool isVisible { get; set; } = true;
        public void ToggleShow()
        {
            showDropDown = !showDropDown;
        }
    }
}
