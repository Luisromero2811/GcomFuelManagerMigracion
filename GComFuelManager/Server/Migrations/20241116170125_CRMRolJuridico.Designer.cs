// <auto-generated />
using System;
using GComFuelManager.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GComFuelManager.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241116170125_CRMRolJuridico")]
    partial class CRMRolJuridico
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GComFuelManager.Server.Identity.IdentityUsuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserCod")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.ActividadRegistrada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActividadRegistrada");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMActividadDocumento", b =>
                {
                    b.Property<int>("ActividadId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.HasKey("ActividadId", "DocumentoId");

                    b.HasIndex("DocumentoId");

                    b.ToTable("CRMActividadDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMActividades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Asignado")
                        .HasColumnType("int");

                    b.Property<int>("Asunto")
                        .HasColumnType("int");

                    b.Property<int>("Contacto_Rel")
                        .HasColumnType("int");

                    b.Property<string>("Desccripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int?>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fch_Inicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fecha_Mod")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fecha_Ven")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Prioridad")
                        .HasColumnType("int");

                    b.Property<int?>("Recordatorio")
                        .HasColumnType("int");

                    b.Property<string>("Retroalimentacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Asignado");

                    b.HasIndex("Asunto");

                    b.HasIndex("Contacto_Rel");

                    b.HasIndex("EquipoId");

                    b.HasIndex("Estatus");

                    b.HasIndex("Prioridad");

                    b.ToTable("CRMActividades");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCatalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CRMCatalogos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCatalogoValor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("CatalogoId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogoId");

                    b.ToTable("CRMCatalogoValores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactoPrincipalId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactoPrincipalId");

                    b.ToTable("CRMClientes");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colonia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstatusId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus_Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Mod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitioWeb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Movil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Oficina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EstatusId");

                    b.HasIndex("OrigenId");

                    b.HasIndex("VendedorId");

                    b.ToTable("CRMContactos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CRMDivisiones");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCaducidad")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionCreadaPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CRMDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMDocumentoRelacionado", b =>
                {
                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentoRelacionadoId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoId", "DocumentoRelacionadoId");

                    b.ToTable("CRMDocumentoRelacionados");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMDocumentoRevision", b =>
                {
                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("RevisionId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoId", "RevisionId");

                    b.ToTable("CRMDocumentoRevisiones");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("CRMEquipos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipoOriginadores", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("OriginadorId")
                        .HasColumnType("int");

                    b.HasKey("EquipoId", "OriginadorId");

                    b.HasIndex("OriginadorId");

                    b.ToTable("CRMEquipoOriginadores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipoVendedor", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.HasKey("EquipoId", "VendedorId");

                    b.HasIndex("VendedorId");

                    b.ToTable("CRMEquipoVendedores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CRMGrupos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMGrupoRol", b =>
                {
                    b.Property<string>("RolId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.HasKey("RolId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("CRMGrupoRoles");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("CantidadEstaciones")
                        .HasColumnType("int");

                    b.Property<double>("CantidadLts")
                        .HasColumnType("float");

                    b.Property<int>("ContactoId")
                        .HasColumnType("int");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<int>("DiasPagoId")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("EtapaVentaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int");

                    b.Property<int>("ModeloVentaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Opor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrigenPrductoId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioLts")
                        .HasColumnType("float");

                    b.Property<decimal>("Probabilidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Prox_Paso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoProductoId")
                        .HasColumnType("int");

                    b.Property<double>("TotalLts")
                        .HasColumnType("float");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int");

                    b.Property<double>("ValorOportunidad")
                        .HasColumnType("float");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.Property<int>("VolumenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaId");

                    b.HasIndex("DiasPagoId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("EtapaVentaId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("ModeloVentaId");

                    b.HasIndex("OrigenPrductoId");

                    b.HasIndex("PeriodoId");

                    b.HasIndex("TipoId");

                    b.HasIndex("TipoProductoId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("VendedorId");

                    b.HasIndex("VolumenId");

                    b.ToTable("CRMOportunidades");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidadDocumento", b =>
                {
                    b.Property<int>("OportunidadId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.HasKey("OportunidadId", "DocumentoId");

                    b.HasIndex("DocumentoId");

                    b.ToTable("CRMOportunidadDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidadEstadoHistorial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EtapaVentaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("datetime2");

                    b.Property<int>("OportunidadId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EtapaVentaId");

                    b.HasIndex("OportunidadId");

                    b.ToTable("CRMOportunidadEstadoHistoriales");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOriginador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Movil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Oficina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("CRMOriginadores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CRMRoles");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMRolPermiso", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("PermisoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolId", "PermisoId");

                    b.ToTable("CRMRolPermisos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMRolUsuario", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolId", "UserId");

                    b.ToTable("CRMRolUsuarios");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMUsuarioDivision", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "DivisionId");

                    b.ToTable("CRMUsuarioDivisiones");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMVendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Movil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel_Oficina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("CRMVendedores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMVendedorOriginador", b =>
                {
                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.Property<int>("OriginadorId")
                        .HasColumnType("int");

                    b.HasKey("VendedorId", "OriginadorId");

                    b.HasIndex("OriginadorId");

                    b.ToTable("CRMVendedorOriginadores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.DocumentoTipoDocumento", b =>
                {
                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoId", "TipoDocumentoId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("DocumentoTipoDocumento");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.Errors", b =>
                {
                    b.Property<string>("Cod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fch")
                        .HasColumnType("datetime2");

                    b.HasKey("Cod");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.Log", b =>
                {
                    b.Property<int>("cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cod"));

                    b.Property<int?>("codusu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fch")
                        .HasColumnType("datetime2");

                    b.HasKey("cod");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoDocumento");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.Usuario", b =>
                {
                    b.Property<int>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cod"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("CodCte")
                        .HasColumnType("int");

                    b.Property<short?>("CodGru")
                        .HasColumnType("smallint");

                    b.Property<string>("Cve")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Den")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte?>("Est")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Fch")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<string>("Privilegio")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte?>("Tip")
                        .HasColumnType("tinyint");

                    b.Property<string>("Usu")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Cod");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMActividadDocumento", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMActividades", "Actividad")
                        .WithMany("ActividadDocumentos")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDocumento", "Documento")
                        .WithMany("ActividadDocumentos")
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMActividades", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMVendedor", "Vendedor")
                        .WithMany("Actividades")
                        .HasForeignKey("Asignado")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Asuntos")
                        .WithMany()
                        .HasForeignKey("Asunto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMContacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("Contacto_Rel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMEquipo", "Equipo")
                        .WithMany("Actividades")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Estados")
                        .WithMany()
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Prioridades")
                        .WithMany()
                        .HasForeignKey("Prioridad")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Asuntos");

                    b.Navigation("Contacto");

                    b.Navigation("Equipo");

                    b.Navigation("Estados");

                    b.Navigation("Prioridades");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCatalogoValor", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogo", "Catalogo")
                        .WithMany("Valores")
                        .HasForeignKey("CatalogoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catalogo");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCliente", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMContacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contacto");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMContacto", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Origen")
                        .WithMany()
                        .HasForeignKey("OrigenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMVendedor", "Vendedor")
                        .WithMany("Contactos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cliente");

                    b.Navigation("Division");

                    b.Navigation("Estatus");

                    b.Navigation("Origen");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipo", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipoOriginadores", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMEquipo", "Equipo")
                        .WithMany("EquipoOriginadores")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMOriginador", "Originador")
                        .WithMany("EquipoOriginadores")
                        .HasForeignKey("OriginadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Originador");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipoVendedor", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMEquipo", "Equipo")
                        .WithMany("EquipoVendedores")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMVendedor", "Vendedor")
                        .WithMany("EquipoVendedores")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMGrupoRol", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMGrupo", "Grupo")
                        .WithMany("GrupoRols")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidad", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMContacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCliente", "CRMCliente")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "DiasCredito")
                        .WithMany()
                        .HasForeignKey("DiasPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMEquipo", "Equipo")
                        .WithMany("Oportunidades")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "EtapaVenta")
                        .WithMany()
                        .HasForeignKey("EtapaVentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "FormaPago")
                        .WithMany()
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "ModeloVenta")
                        .WithMany()
                        .HasForeignKey("ModeloVentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "OrigenProducto")
                        .WithMany()
                        .HasForeignKey("OrigenPrductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Periodo")
                        .WithMany()
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "TipoProducto")
                        .WithMany()
                        .HasForeignKey("TipoProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMVendedor", "Vendedor")
                        .WithMany("Oportunidades")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "Volumen")
                        .WithMany()
                        .HasForeignKey("VolumenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CRMCliente");

                    b.Navigation("Contacto");

                    b.Navigation("DiasCredito");

                    b.Navigation("Equipo");

                    b.Navigation("EtapaVenta");

                    b.Navigation("FormaPago");

                    b.Navigation("ModeloVenta");

                    b.Navigation("OrigenProducto");

                    b.Navigation("Periodo");

                    b.Navigation("Tipo");

                    b.Navigation("TipoProducto");

                    b.Navigation("UnidadMedida");

                    b.Navigation("Vendedor");

                    b.Navigation("Volumen");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidadDocumento", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDocumento", "Documento")
                        .WithMany("OportunidadDocumentos")
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMOportunidad", "Oportunidad")
                        .WithMany("OportunidadDocumentos")
                        .HasForeignKey("OportunidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("Oportunidad");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidadEstadoHistorial", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMCatalogoValor", "EtapaVenta")
                        .WithMany()
                        .HasForeignKey("EtapaVentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMOportunidad", "Oportunidad")
                        .WithMany("HistorialEstados")
                        .HasForeignKey("OportunidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EtapaVenta");

                    b.Navigation("Oportunidad");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOriginador", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMVendedor", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMVendedorOriginador", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMOriginador", "Originador")
                        .WithMany("VendedorOriginadores")
                        .HasForeignKey("OriginadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.CRMVendedor", "Vendedor")
                        .WithMany("VendedorOriginadores")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Originador");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.DocumentoTipoDocumento", b =>
                {
                    b.HasOne("GComFuelManager.Shared.Modelos.CRMDocumento", "CRMDocumento")
                        .WithMany("DocumentoTipoDocumentos")
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Shared.Modelos.TipoDocumento", "TipoDocumento")
                        .WithMany("DocumentoTipoDocumentos")
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CRMDocumento");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GComFuelManager.Server.Identity.IdentityUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GComFuelManager.Server.Identity.IdentityUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GComFuelManager.Server.Identity.IdentityUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GComFuelManager.Server.Identity.IdentityUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMActividades", b =>
                {
                    b.Navigation("ActividadDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMCatalogo", b =>
                {
                    b.Navigation("Valores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMDocumento", b =>
                {
                    b.Navigation("ActividadDocumentos");

                    b.Navigation("DocumentoTipoDocumentos");

                    b.Navigation("OportunidadDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMEquipo", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("EquipoOriginadores");

                    b.Navigation("EquipoVendedores");

                    b.Navigation("Oportunidades");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMGrupo", b =>
                {
                    b.Navigation("GrupoRols");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOportunidad", b =>
                {
                    b.Navigation("HistorialEstados");

                    b.Navigation("OportunidadDocumentos");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMOriginador", b =>
                {
                    b.Navigation("EquipoOriginadores");

                    b.Navigation("VendedorOriginadores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.CRMVendedor", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("Contactos");

                    b.Navigation("EquipoVendedores");

                    b.Navigation("Oportunidades");

                    b.Navigation("VendedorOriginadores");
                });

            modelBuilder.Entity("GComFuelManager.Shared.Modelos.TipoDocumento", b =>
                {
                    b.Navigation("DocumentoTipoDocumentos");
                });
#pragma warning restore 612, 618
        }
    }
}
